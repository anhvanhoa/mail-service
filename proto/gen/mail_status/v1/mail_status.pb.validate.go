// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: mail_status/v1/mail_status.proto

package proto

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on CreateMailStatusRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateMailStatusRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateMailStatusRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateMailStatusRequestMultiError, or nil if none found.
func (m *CreateMailStatusRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateMailStatusRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Status

	// no validation rules for Name

	// no validation rules for CreatedAt

	if len(errors) > 0 {
		return CreateMailStatusRequestMultiError(errors)
	}

	return nil
}

// CreateMailStatusRequestMultiError is an error wrapping multiple validation
// errors returned by CreateMailStatusRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateMailStatusRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateMailStatusRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateMailStatusRequestMultiError) AllErrors() []error { return m }

// CreateMailStatusRequestValidationError is the validation error returned by
// CreateMailStatusRequest.Validate if the designated constraints aren't met.
type CreateMailStatusRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateMailStatusRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateMailStatusRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateMailStatusRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateMailStatusRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateMailStatusRequestValidationError) ErrorName() string {
	return "CreateMailStatusRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateMailStatusRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateMailStatusRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateMailStatusRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateMailStatusRequestValidationError{}

// Validate checks the field values on MailStatus with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *MailStatus) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MailStatus with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in MailStatusMultiError, or
// nil if none found.
func (m *MailStatus) ValidateAll() error {
	return m.validate(true)
}

func (m *MailStatus) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Status

	// no validation rules for Name

	// no validation rules for CreatedAt

	if len(errors) > 0 {
		return MailStatusMultiError(errors)
	}

	return nil
}

// MailStatusMultiError is an error wrapping multiple validation errors
// returned by MailStatus.ValidateAll() if the designated constraints aren't met.
type MailStatusMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MailStatusMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MailStatusMultiError) AllErrors() []error { return m }

// MailStatusValidationError is the validation error returned by
// MailStatus.Validate if the designated constraints aren't met.
type MailStatusValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MailStatusValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MailStatusValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MailStatusValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MailStatusValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MailStatusValidationError) ErrorName() string { return "MailStatusValidationError" }

// Error satisfies the builtin error interface
func (e MailStatusValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMailStatus.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MailStatusValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MailStatusValidationError{}

// Validate checks the field values on CreateMailStatusResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateMailStatusResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateMailStatusResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateMailStatusResponseMultiError, or nil if none found.
func (m *CreateMailStatusResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateMailStatusResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Message

	if all {
		switch v := interface{}(m.GetMailStatus()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateMailStatusResponseValidationError{
					field:  "MailStatus",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateMailStatusResponseValidationError{
					field:  "MailStatus",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMailStatus()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateMailStatusResponseValidationError{
				field:  "MailStatus",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateMailStatusResponseMultiError(errors)
	}

	return nil
}

// CreateMailStatusResponseMultiError is an error wrapping multiple validation
// errors returned by CreateMailStatusResponse.ValidateAll() if the designated
// constraints aren't met.
type CreateMailStatusResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateMailStatusResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateMailStatusResponseMultiError) AllErrors() []error { return m }

// CreateMailStatusResponseValidationError is the validation error returned by
// CreateMailStatusResponse.Validate if the designated constraints aren't met.
type CreateMailStatusResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateMailStatusResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateMailStatusResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateMailStatusResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateMailStatusResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateMailStatusResponseValidationError) ErrorName() string {
	return "CreateMailStatusResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateMailStatusResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateMailStatusResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateMailStatusResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateMailStatusResponseValidationError{}

// Validate checks the field values on UpdateMailStatusRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateMailStatusRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateMailStatusRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateMailStatusRequestMultiError, or nil if none found.
func (m *UpdateMailStatusRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateMailStatusRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Status

	// no validation rules for Name

	if len(errors) > 0 {
		return UpdateMailStatusRequestMultiError(errors)
	}

	return nil
}

// UpdateMailStatusRequestMultiError is an error wrapping multiple validation
// errors returned by UpdateMailStatusRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdateMailStatusRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateMailStatusRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateMailStatusRequestMultiError) AllErrors() []error { return m }

// UpdateMailStatusRequestValidationError is the validation error returned by
// UpdateMailStatusRequest.Validate if the designated constraints aren't met.
type UpdateMailStatusRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateMailStatusRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateMailStatusRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateMailStatusRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateMailStatusRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateMailStatusRequestValidationError) ErrorName() string {
	return "UpdateMailStatusRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateMailStatusRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateMailStatusRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateMailStatusRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateMailStatusRequestValidationError{}

// Validate checks the field values on UpdateMailStatusResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateMailStatusResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateMailStatusResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateMailStatusResponseMultiError, or nil if none found.
func (m *UpdateMailStatusResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateMailStatusResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Message

	if all {
		switch v := interface{}(m.GetMailStatus()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateMailStatusResponseValidationError{
					field:  "MailStatus",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateMailStatusResponseValidationError{
					field:  "MailStatus",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMailStatus()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateMailStatusResponseValidationError{
				field:  "MailStatus",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateMailStatusResponseMultiError(errors)
	}

	return nil
}

// UpdateMailStatusResponseMultiError is an error wrapping multiple validation
// errors returned by UpdateMailStatusResponse.ValidateAll() if the designated
// constraints aren't met.
type UpdateMailStatusResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateMailStatusResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateMailStatusResponseMultiError) AllErrors() []error { return m }

// UpdateMailStatusResponseValidationError is the validation error returned by
// UpdateMailStatusResponse.Validate if the designated constraints aren't met.
type UpdateMailStatusResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateMailStatusResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateMailStatusResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateMailStatusResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateMailStatusResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateMailStatusResponseValidationError) ErrorName() string {
	return "UpdateMailStatusResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateMailStatusResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateMailStatusResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateMailStatusResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateMailStatusResponseValidationError{}

// Validate checks the field values on DeleteMailStatusRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteMailStatusRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteMailStatusRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteMailStatusRequestMultiError, or nil if none found.
func (m *DeleteMailStatusRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteMailStatusRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Status

	if len(errors) > 0 {
		return DeleteMailStatusRequestMultiError(errors)
	}

	return nil
}

// DeleteMailStatusRequestMultiError is an error wrapping multiple validation
// errors returned by DeleteMailStatusRequest.ValidateAll() if the designated
// constraints aren't met.
type DeleteMailStatusRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteMailStatusRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteMailStatusRequestMultiError) AllErrors() []error { return m }

// DeleteMailStatusRequestValidationError is the validation error returned by
// DeleteMailStatusRequest.Validate if the designated constraints aren't met.
type DeleteMailStatusRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteMailStatusRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteMailStatusRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteMailStatusRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteMailStatusRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteMailStatusRequestValidationError) ErrorName() string {
	return "DeleteMailStatusRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteMailStatusRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteMailStatusRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteMailStatusRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteMailStatusRequestValidationError{}

// Validate checks the field values on DeleteMailStatusResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteMailStatusResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteMailStatusResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteMailStatusResponseMultiError, or nil if none found.
func (m *DeleteMailStatusResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteMailStatusResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Message

	if len(errors) > 0 {
		return DeleteMailStatusResponseMultiError(errors)
	}

	return nil
}

// DeleteMailStatusResponseMultiError is an error wrapping multiple validation
// errors returned by DeleteMailStatusResponse.ValidateAll() if the designated
// constraints aren't met.
type DeleteMailStatusResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteMailStatusResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteMailStatusResponseMultiError) AllErrors() []error { return m }

// DeleteMailStatusResponseValidationError is the validation error returned by
// DeleteMailStatusResponse.Validate if the designated constraints aren't met.
type DeleteMailStatusResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteMailStatusResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteMailStatusResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteMailStatusResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteMailStatusResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteMailStatusResponseValidationError) ErrorName() string {
	return "DeleteMailStatusResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteMailStatusResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteMailStatusResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteMailStatusResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteMailStatusResponseValidationError{}

// Validate checks the field values on GetMailStatusRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetMailStatusRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetMailStatusRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetMailStatusRequestMultiError, or nil if none found.
func (m *GetMailStatusRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetMailStatusRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Status

	if len(errors) > 0 {
		return GetMailStatusRequestMultiError(errors)
	}

	return nil
}

// GetMailStatusRequestMultiError is an error wrapping multiple validation
// errors returned by GetMailStatusRequest.ValidateAll() if the designated
// constraints aren't met.
type GetMailStatusRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetMailStatusRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetMailStatusRequestMultiError) AllErrors() []error { return m }

// GetMailStatusRequestValidationError is the validation error returned by
// GetMailStatusRequest.Validate if the designated constraints aren't met.
type GetMailStatusRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetMailStatusRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetMailStatusRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetMailStatusRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetMailStatusRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetMailStatusRequestValidationError) ErrorName() string {
	return "GetMailStatusRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetMailStatusRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetMailStatusRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetMailStatusRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetMailStatusRequestValidationError{}

// Validate checks the field values on GetMailStatusResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetMailStatusResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetMailStatusResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetMailStatusResponseMultiError, or nil if none found.
func (m *GetMailStatusResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetMailStatusResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Message

	if all {
		switch v := interface{}(m.GetMailStatus()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetMailStatusResponseValidationError{
					field:  "MailStatus",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetMailStatusResponseValidationError{
					field:  "MailStatus",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMailStatus()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetMailStatusResponseValidationError{
				field:  "MailStatus",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetMailStatusResponseMultiError(errors)
	}

	return nil
}

// GetMailStatusResponseMultiError is an error wrapping multiple validation
// errors returned by GetMailStatusResponse.ValidateAll() if the designated
// constraints aren't met.
type GetMailStatusResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetMailStatusResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetMailStatusResponseMultiError) AllErrors() []error { return m }

// GetMailStatusResponseValidationError is the validation error returned by
// GetMailStatusResponse.Validate if the designated constraints aren't met.
type GetMailStatusResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetMailStatusResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetMailStatusResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetMailStatusResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetMailStatusResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetMailStatusResponseValidationError) ErrorName() string {
	return "GetMailStatusResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetMailStatusResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetMailStatusResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetMailStatusResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetMailStatusResponseValidationError{}

// Validate checks the field values on GetAllMailStatusRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetAllMailStatusRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetAllMailStatusRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetAllMailStatusRequestMultiError, or nil if none found.
func (m *GetAllMailStatusRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetAllMailStatusRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Page

	// no validation rules for Limit

	// no validation rules for Search

	// no validation rules for Sort

	// no validation rules for Order

	// no validation rules for Status

	// no validation rules for Name

	// no validation rules for CreatedAt

	if len(errors) > 0 {
		return GetAllMailStatusRequestMultiError(errors)
	}

	return nil
}

// GetAllMailStatusRequestMultiError is an error wrapping multiple validation
// errors returned by GetAllMailStatusRequest.ValidateAll() if the designated
// constraints aren't met.
type GetAllMailStatusRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetAllMailStatusRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetAllMailStatusRequestMultiError) AllErrors() []error { return m }

// GetAllMailStatusRequestValidationError is the validation error returned by
// GetAllMailStatusRequest.Validate if the designated constraints aren't met.
type GetAllMailStatusRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetAllMailStatusRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetAllMailStatusRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetAllMailStatusRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetAllMailStatusRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetAllMailStatusRequestValidationError) ErrorName() string {
	return "GetAllMailStatusRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetAllMailStatusRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetAllMailStatusRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetAllMailStatusRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetAllMailStatusRequestValidationError{}

// Validate checks the field values on GetAllMailStatusResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetAllMailStatusResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetAllMailStatusResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetAllMailStatusResponseMultiError, or nil if none found.
func (m *GetAllMailStatusResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetAllMailStatusResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Message

	// no validation rules for Total

	// no validation rules for Page

	// no validation rules for Limit

	for idx, item := range m.GetMailStatuses() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetAllMailStatusResponseValidationError{
						field:  fmt.Sprintf("MailStatuses[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetAllMailStatusResponseValidationError{
						field:  fmt.Sprintf("MailStatuses[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetAllMailStatusResponseValidationError{
					field:  fmt.Sprintf("MailStatuses[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetAllMailStatusResponseMultiError(errors)
	}

	return nil
}

// GetAllMailStatusResponseMultiError is an error wrapping multiple validation
// errors returned by GetAllMailStatusResponse.ValidateAll() if the designated
// constraints aren't met.
type GetAllMailStatusResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetAllMailStatusResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetAllMailStatusResponseMultiError) AllErrors() []error { return m }

// GetAllMailStatusResponseValidationError is the validation error returned by
// GetAllMailStatusResponse.Validate if the designated constraints aren't met.
type GetAllMailStatusResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetAllMailStatusResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetAllMailStatusResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetAllMailStatusResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetAllMailStatusResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetAllMailStatusResponseValidationError) ErrorName() string {
	return "GetAllMailStatusResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetAllMailStatusResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetAllMailStatusResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetAllMailStatusResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetAllMailStatusResponseValidationError{}
