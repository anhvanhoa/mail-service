// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             (unknown)
// source: mail_status/v1/mail_status.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	MailStatusService_CreateMailStatus_FullMethodName = "/exam.v1.MailStatusService/CreateMailStatus"
	MailStatusService_UpdateMailStatus_FullMethodName = "/exam.v1.MailStatusService/UpdateMailStatus"
	MailStatusService_DeleteMailStatus_FullMethodName = "/exam.v1.MailStatusService/DeleteMailStatus"
	MailStatusService_GetMailStatus_FullMethodName    = "/exam.v1.MailStatusService/GetMailStatus"
	MailStatusService_GetAllMailStatus_FullMethodName = "/exam.v1.MailStatusService/GetAllMailStatus"
)

// MailStatusServiceClient is the client API for MailStatusService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MailStatusServiceClient interface {
	CreateMailStatus(ctx context.Context, in *CreateMailStatusRequest, opts ...grpc.CallOption) (*CreateMailStatusResponse, error)
	UpdateMailStatus(ctx context.Context, in *UpdateMailStatusRequest, opts ...grpc.CallOption) (*UpdateMailStatusResponse, error)
	DeleteMailStatus(ctx context.Context, in *DeleteMailStatusRequest, opts ...grpc.CallOption) (*DeleteMailStatusResponse, error)
	GetMailStatus(ctx context.Context, in *GetMailStatusRequest, opts ...grpc.CallOption) (*GetMailStatusResponse, error)
	GetAllMailStatus(ctx context.Context, in *GetAllMailStatusRequest, opts ...grpc.CallOption) (*GetAllMailStatusResponse, error)
}

type mailStatusServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMailStatusServiceClient(cc grpc.ClientConnInterface) MailStatusServiceClient {
	return &mailStatusServiceClient{cc}
}

func (c *mailStatusServiceClient) CreateMailStatus(ctx context.Context, in *CreateMailStatusRequest, opts ...grpc.CallOption) (*CreateMailStatusResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateMailStatusResponse)
	err := c.cc.Invoke(ctx, MailStatusService_CreateMailStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mailStatusServiceClient) UpdateMailStatus(ctx context.Context, in *UpdateMailStatusRequest, opts ...grpc.CallOption) (*UpdateMailStatusResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateMailStatusResponse)
	err := c.cc.Invoke(ctx, MailStatusService_UpdateMailStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mailStatusServiceClient) DeleteMailStatus(ctx context.Context, in *DeleteMailStatusRequest, opts ...grpc.CallOption) (*DeleteMailStatusResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteMailStatusResponse)
	err := c.cc.Invoke(ctx, MailStatusService_DeleteMailStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mailStatusServiceClient) GetMailStatus(ctx context.Context, in *GetMailStatusRequest, opts ...grpc.CallOption) (*GetMailStatusResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetMailStatusResponse)
	err := c.cc.Invoke(ctx, MailStatusService_GetMailStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mailStatusServiceClient) GetAllMailStatus(ctx context.Context, in *GetAllMailStatusRequest, opts ...grpc.CallOption) (*GetAllMailStatusResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetAllMailStatusResponse)
	err := c.cc.Invoke(ctx, MailStatusService_GetAllMailStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MailStatusServiceServer is the server API for MailStatusService service.
// All implementations must embed UnimplementedMailStatusServiceServer
// for forward compatibility
type MailStatusServiceServer interface {
	CreateMailStatus(context.Context, *CreateMailStatusRequest) (*CreateMailStatusResponse, error)
	UpdateMailStatus(context.Context, *UpdateMailStatusRequest) (*UpdateMailStatusResponse, error)
	DeleteMailStatus(context.Context, *DeleteMailStatusRequest) (*DeleteMailStatusResponse, error)
	GetMailStatus(context.Context, *GetMailStatusRequest) (*GetMailStatusResponse, error)
	GetAllMailStatus(context.Context, *GetAllMailStatusRequest) (*GetAllMailStatusResponse, error)
	mustEmbedUnimplementedMailStatusServiceServer()
}

// UnimplementedMailStatusServiceServer must be embedded to have forward compatible implementations.
type UnimplementedMailStatusServiceServer struct {
}

func (UnimplementedMailStatusServiceServer) CreateMailStatus(context.Context, *CreateMailStatusRequest) (*CreateMailStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateMailStatus not implemented")
}
func (UnimplementedMailStatusServiceServer) UpdateMailStatus(context.Context, *UpdateMailStatusRequest) (*UpdateMailStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateMailStatus not implemented")
}
func (UnimplementedMailStatusServiceServer) DeleteMailStatus(context.Context, *DeleteMailStatusRequest) (*DeleteMailStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteMailStatus not implemented")
}
func (UnimplementedMailStatusServiceServer) GetMailStatus(context.Context, *GetMailStatusRequest) (*GetMailStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMailStatus not implemented")
}
func (UnimplementedMailStatusServiceServer) GetAllMailStatus(context.Context, *GetAllMailStatusRequest) (*GetAllMailStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllMailStatus not implemented")
}
func (UnimplementedMailStatusServiceServer) mustEmbedUnimplementedMailStatusServiceServer() {}

// UnsafeMailStatusServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MailStatusServiceServer will
// result in compilation errors.
type UnsafeMailStatusServiceServer interface {
	mustEmbedUnimplementedMailStatusServiceServer()
}

func RegisterMailStatusServiceServer(s grpc.ServiceRegistrar, srv MailStatusServiceServer) {
	s.RegisterService(&MailStatusService_ServiceDesc, srv)
}

func _MailStatusService_CreateMailStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateMailStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MailStatusServiceServer).CreateMailStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MailStatusService_CreateMailStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MailStatusServiceServer).CreateMailStatus(ctx, req.(*CreateMailStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MailStatusService_UpdateMailStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateMailStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MailStatusServiceServer).UpdateMailStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MailStatusService_UpdateMailStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MailStatusServiceServer).UpdateMailStatus(ctx, req.(*UpdateMailStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MailStatusService_DeleteMailStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteMailStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MailStatusServiceServer).DeleteMailStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MailStatusService_DeleteMailStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MailStatusServiceServer).DeleteMailStatus(ctx, req.(*DeleteMailStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MailStatusService_GetMailStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMailStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MailStatusServiceServer).GetMailStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MailStatusService_GetMailStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MailStatusServiceServer).GetMailStatus(ctx, req.(*GetMailStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MailStatusService_GetAllMailStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllMailStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MailStatusServiceServer).GetAllMailStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MailStatusService_GetAllMailStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MailStatusServiceServer).GetAllMailStatus(ctx, req.(*GetAllMailStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// MailStatusService_ServiceDesc is the grpc.ServiceDesc for MailStatusService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MailStatusService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "exam.v1.MailStatusService",
	HandlerType: (*MailStatusServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateMailStatus",
			Handler:    _MailStatusService_CreateMailStatus_Handler,
		},
		{
			MethodName: "UpdateMailStatus",
			Handler:    _MailStatusService_UpdateMailStatus_Handler,
		},
		{
			MethodName: "DeleteMailStatus",
			Handler:    _MailStatusService_DeleteMailStatus_Handler,
		},
		{
			MethodName: "GetMailStatus",
			Handler:    _MailStatusService_GetMailStatus_Handler,
		},
		{
			MethodName: "GetAllMailStatus",
			Handler:    _MailStatusService_GetAllMailStatus_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "mail_status/v1/mail_status.proto",
}
