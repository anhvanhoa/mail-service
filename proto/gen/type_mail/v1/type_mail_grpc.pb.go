// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             (unknown)
// source: type_mail/v1/type_mail.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	TypeMailService_CreateTypeMail_FullMethodName = "/exam.v1.TypeMailService/CreateTypeMail"
	TypeMailService_UpdateTypeMail_FullMethodName = "/exam.v1.TypeMailService/UpdateTypeMail"
	TypeMailService_DeleteTypeMail_FullMethodName = "/exam.v1.TypeMailService/DeleteTypeMail"
	TypeMailService_GetTypeMail_FullMethodName    = "/exam.v1.TypeMailService/GetTypeMail"
	TypeMailService_GetAllTypeMail_FullMethodName = "/exam.v1.TypeMailService/GetAllTypeMail"
)

// TypeMailServiceClient is the client API for TypeMailService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TypeMailServiceClient interface {
	CreateTypeMail(ctx context.Context, in *CreateTypeMailRequest, opts ...grpc.CallOption) (*CreateTypeMailResponse, error)
	UpdateTypeMail(ctx context.Context, in *UpdateTypeMailRequest, opts ...grpc.CallOption) (*UpdateTypeMailResponse, error)
	DeleteTypeMail(ctx context.Context, in *DeleteTypeMailRequest, opts ...grpc.CallOption) (*DeleteTypeMailResponse, error)
	GetTypeMail(ctx context.Context, in *GetTypeMailRequest, opts ...grpc.CallOption) (*GetTypeMailResponse, error)
	GetAllTypeMail(ctx context.Context, in *GetAllTypeMailRequest, opts ...grpc.CallOption) (*GetAllTypeMailResponse, error)
}

type typeMailServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTypeMailServiceClient(cc grpc.ClientConnInterface) TypeMailServiceClient {
	return &typeMailServiceClient{cc}
}

func (c *typeMailServiceClient) CreateTypeMail(ctx context.Context, in *CreateTypeMailRequest, opts ...grpc.CallOption) (*CreateTypeMailResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateTypeMailResponse)
	err := c.cc.Invoke(ctx, TypeMailService_CreateTypeMail_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *typeMailServiceClient) UpdateTypeMail(ctx context.Context, in *UpdateTypeMailRequest, opts ...grpc.CallOption) (*UpdateTypeMailResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateTypeMailResponse)
	err := c.cc.Invoke(ctx, TypeMailService_UpdateTypeMail_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *typeMailServiceClient) DeleteTypeMail(ctx context.Context, in *DeleteTypeMailRequest, opts ...grpc.CallOption) (*DeleteTypeMailResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteTypeMailResponse)
	err := c.cc.Invoke(ctx, TypeMailService_DeleteTypeMail_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *typeMailServiceClient) GetTypeMail(ctx context.Context, in *GetTypeMailRequest, opts ...grpc.CallOption) (*GetTypeMailResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetTypeMailResponse)
	err := c.cc.Invoke(ctx, TypeMailService_GetTypeMail_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *typeMailServiceClient) GetAllTypeMail(ctx context.Context, in *GetAllTypeMailRequest, opts ...grpc.CallOption) (*GetAllTypeMailResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetAllTypeMailResponse)
	err := c.cc.Invoke(ctx, TypeMailService_GetAllTypeMail_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TypeMailServiceServer is the server API for TypeMailService service.
// All implementations must embed UnimplementedTypeMailServiceServer
// for forward compatibility
type TypeMailServiceServer interface {
	CreateTypeMail(context.Context, *CreateTypeMailRequest) (*CreateTypeMailResponse, error)
	UpdateTypeMail(context.Context, *UpdateTypeMailRequest) (*UpdateTypeMailResponse, error)
	DeleteTypeMail(context.Context, *DeleteTypeMailRequest) (*DeleteTypeMailResponse, error)
	GetTypeMail(context.Context, *GetTypeMailRequest) (*GetTypeMailResponse, error)
	GetAllTypeMail(context.Context, *GetAllTypeMailRequest) (*GetAllTypeMailResponse, error)
	mustEmbedUnimplementedTypeMailServiceServer()
}

// UnimplementedTypeMailServiceServer must be embedded to have forward compatible implementations.
type UnimplementedTypeMailServiceServer struct {
}

func (UnimplementedTypeMailServiceServer) CreateTypeMail(context.Context, *CreateTypeMailRequest) (*CreateTypeMailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTypeMail not implemented")
}
func (UnimplementedTypeMailServiceServer) UpdateTypeMail(context.Context, *UpdateTypeMailRequest) (*UpdateTypeMailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTypeMail not implemented")
}
func (UnimplementedTypeMailServiceServer) DeleteTypeMail(context.Context, *DeleteTypeMailRequest) (*DeleteTypeMailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTypeMail not implemented")
}
func (UnimplementedTypeMailServiceServer) GetTypeMail(context.Context, *GetTypeMailRequest) (*GetTypeMailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTypeMail not implemented")
}
func (UnimplementedTypeMailServiceServer) GetAllTypeMail(context.Context, *GetAllTypeMailRequest) (*GetAllTypeMailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllTypeMail not implemented")
}
func (UnimplementedTypeMailServiceServer) mustEmbedUnimplementedTypeMailServiceServer() {}

// UnsafeTypeMailServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TypeMailServiceServer will
// result in compilation errors.
type UnsafeTypeMailServiceServer interface {
	mustEmbedUnimplementedTypeMailServiceServer()
}

func RegisterTypeMailServiceServer(s grpc.ServiceRegistrar, srv TypeMailServiceServer) {
	s.RegisterService(&TypeMailService_ServiceDesc, srv)
}

func _TypeMailService_CreateTypeMail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTypeMailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TypeMailServiceServer).CreateTypeMail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TypeMailService_CreateTypeMail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TypeMailServiceServer).CreateTypeMail(ctx, req.(*CreateTypeMailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TypeMailService_UpdateTypeMail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateTypeMailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TypeMailServiceServer).UpdateTypeMail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TypeMailService_UpdateTypeMail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TypeMailServiceServer).UpdateTypeMail(ctx, req.(*UpdateTypeMailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TypeMailService_DeleteTypeMail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteTypeMailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TypeMailServiceServer).DeleteTypeMail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TypeMailService_DeleteTypeMail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TypeMailServiceServer).DeleteTypeMail(ctx, req.(*DeleteTypeMailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TypeMailService_GetTypeMail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTypeMailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TypeMailServiceServer).GetTypeMail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TypeMailService_GetTypeMail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TypeMailServiceServer).GetTypeMail(ctx, req.(*GetTypeMailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TypeMailService_GetAllTypeMail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllTypeMailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TypeMailServiceServer).GetAllTypeMail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TypeMailService_GetAllTypeMail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TypeMailServiceServer).GetAllTypeMail(ctx, req.(*GetAllTypeMailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TypeMailService_ServiceDesc is the grpc.ServiceDesc for TypeMailService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TypeMailService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "exam.v1.TypeMailService",
	HandlerType: (*TypeMailServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateTypeMail",
			Handler:    _TypeMailService_CreateTypeMail_Handler,
		},
		{
			MethodName: "UpdateTypeMail",
			Handler:    _TypeMailService_UpdateTypeMail_Handler,
		},
		{
			MethodName: "DeleteTypeMail",
			Handler:    _TypeMailService_DeleteTypeMail_Handler,
		},
		{
			MethodName: "GetTypeMail",
			Handler:    _TypeMailService_GetTypeMail_Handler,
		},
		{
			MethodName: "GetAllTypeMail",
			Handler:    _TypeMailService_GetAllTypeMail_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "type_mail/v1/type_mail.proto",
}
