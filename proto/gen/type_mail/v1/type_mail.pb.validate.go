// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: type_mail/v1/type_mail.proto

package proto

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on CreateTypeMailRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateTypeMailRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateTypeMailRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateTypeMailRequestMultiError, or nil if none found.
func (m *CreateTypeMailRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateTypeMailRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	// no validation rules for CreatedBy

	// no validation rules for CreatedAt

	if len(errors) > 0 {
		return CreateTypeMailRequestMultiError(errors)
	}

	return nil
}

// CreateTypeMailRequestMultiError is an error wrapping multiple validation
// errors returned by CreateTypeMailRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateTypeMailRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateTypeMailRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateTypeMailRequestMultiError) AllErrors() []error { return m }

// CreateTypeMailRequestValidationError is the validation error returned by
// CreateTypeMailRequest.Validate if the designated constraints aren't met.
type CreateTypeMailRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateTypeMailRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateTypeMailRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateTypeMailRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateTypeMailRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateTypeMailRequestValidationError) ErrorName() string {
	return "CreateTypeMailRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateTypeMailRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateTypeMailRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateTypeMailRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateTypeMailRequestValidationError{}

// Validate checks the field values on TypeMail with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *TypeMail) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TypeMail with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in TypeMailMultiError, or nil
// if none found.
func (m *TypeMail) ValidateAll() error {
	return m.validate(true)
}

func (m *TypeMail) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Name

	// no validation rules for CreatedBy

	// no validation rules for CreatedAt

	// no validation rules for UpdatedAt

	if len(errors) > 0 {
		return TypeMailMultiError(errors)
	}

	return nil
}

// TypeMailMultiError is an error wrapping multiple validation errors returned
// by TypeMail.ValidateAll() if the designated constraints aren't met.
type TypeMailMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TypeMailMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TypeMailMultiError) AllErrors() []error { return m }

// TypeMailValidationError is the validation error returned by
// TypeMail.Validate if the designated constraints aren't met.
type TypeMailValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TypeMailValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TypeMailValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TypeMailValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TypeMailValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TypeMailValidationError) ErrorName() string { return "TypeMailValidationError" }

// Error satisfies the builtin error interface
func (e TypeMailValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTypeMail.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TypeMailValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TypeMailValidationError{}

// Validate checks the field values on CreateTypeMailResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateTypeMailResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateTypeMailResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateTypeMailResponseMultiError, or nil if none found.
func (m *CreateTypeMailResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateTypeMailResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Message

	if all {
		switch v := interface{}(m.GetTypeMail()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateTypeMailResponseValidationError{
					field:  "TypeMail",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateTypeMailResponseValidationError{
					field:  "TypeMail",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTypeMail()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateTypeMailResponseValidationError{
				field:  "TypeMail",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateTypeMailResponseMultiError(errors)
	}

	return nil
}

// CreateTypeMailResponseMultiError is an error wrapping multiple validation
// errors returned by CreateTypeMailResponse.ValidateAll() if the designated
// constraints aren't met.
type CreateTypeMailResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateTypeMailResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateTypeMailResponseMultiError) AllErrors() []error { return m }

// CreateTypeMailResponseValidationError is the validation error returned by
// CreateTypeMailResponse.Validate if the designated constraints aren't met.
type CreateTypeMailResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateTypeMailResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateTypeMailResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateTypeMailResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateTypeMailResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateTypeMailResponseValidationError) ErrorName() string {
	return "CreateTypeMailResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateTypeMailResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateTypeMailResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateTypeMailResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateTypeMailResponseValidationError{}

// Validate checks the field values on UpdateTypeMailRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateTypeMailRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateTypeMailRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateTypeMailRequestMultiError, or nil if none found.
func (m *UpdateTypeMailRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateTypeMailRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Name

	if len(errors) > 0 {
		return UpdateTypeMailRequestMultiError(errors)
	}

	return nil
}

// UpdateTypeMailRequestMultiError is an error wrapping multiple validation
// errors returned by UpdateTypeMailRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdateTypeMailRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateTypeMailRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateTypeMailRequestMultiError) AllErrors() []error { return m }

// UpdateTypeMailRequestValidationError is the validation error returned by
// UpdateTypeMailRequest.Validate if the designated constraints aren't met.
type UpdateTypeMailRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateTypeMailRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateTypeMailRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateTypeMailRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateTypeMailRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateTypeMailRequestValidationError) ErrorName() string {
	return "UpdateTypeMailRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateTypeMailRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateTypeMailRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateTypeMailRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateTypeMailRequestValidationError{}

// Validate checks the field values on UpdateTypeMailResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateTypeMailResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateTypeMailResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateTypeMailResponseMultiError, or nil if none found.
func (m *UpdateTypeMailResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateTypeMailResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Message

	if all {
		switch v := interface{}(m.GetTypeMail()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateTypeMailResponseValidationError{
					field:  "TypeMail",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateTypeMailResponseValidationError{
					field:  "TypeMail",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTypeMail()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateTypeMailResponseValidationError{
				field:  "TypeMail",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateTypeMailResponseMultiError(errors)
	}

	return nil
}

// UpdateTypeMailResponseMultiError is an error wrapping multiple validation
// errors returned by UpdateTypeMailResponse.ValidateAll() if the designated
// constraints aren't met.
type UpdateTypeMailResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateTypeMailResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateTypeMailResponseMultiError) AllErrors() []error { return m }

// UpdateTypeMailResponseValidationError is the validation error returned by
// UpdateTypeMailResponse.Validate if the designated constraints aren't met.
type UpdateTypeMailResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateTypeMailResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateTypeMailResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateTypeMailResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateTypeMailResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateTypeMailResponseValidationError) ErrorName() string {
	return "UpdateTypeMailResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateTypeMailResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateTypeMailResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateTypeMailResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateTypeMailResponseValidationError{}

// Validate checks the field values on DeleteTypeMailRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteTypeMailRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteTypeMailRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteTypeMailRequestMultiError, or nil if none found.
func (m *DeleteTypeMailRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteTypeMailRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return DeleteTypeMailRequestMultiError(errors)
	}

	return nil
}

// DeleteTypeMailRequestMultiError is an error wrapping multiple validation
// errors returned by DeleteTypeMailRequest.ValidateAll() if the designated
// constraints aren't met.
type DeleteTypeMailRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteTypeMailRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteTypeMailRequestMultiError) AllErrors() []error { return m }

// DeleteTypeMailRequestValidationError is the validation error returned by
// DeleteTypeMailRequest.Validate if the designated constraints aren't met.
type DeleteTypeMailRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteTypeMailRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteTypeMailRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteTypeMailRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteTypeMailRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteTypeMailRequestValidationError) ErrorName() string {
	return "DeleteTypeMailRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteTypeMailRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteTypeMailRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteTypeMailRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteTypeMailRequestValidationError{}

// Validate checks the field values on DeleteTypeMailResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteTypeMailResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteTypeMailResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteTypeMailResponseMultiError, or nil if none found.
func (m *DeleteTypeMailResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteTypeMailResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Message

	if len(errors) > 0 {
		return DeleteTypeMailResponseMultiError(errors)
	}

	return nil
}

// DeleteTypeMailResponseMultiError is an error wrapping multiple validation
// errors returned by DeleteTypeMailResponse.ValidateAll() if the designated
// constraints aren't met.
type DeleteTypeMailResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteTypeMailResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteTypeMailResponseMultiError) AllErrors() []error { return m }

// DeleteTypeMailResponseValidationError is the validation error returned by
// DeleteTypeMailResponse.Validate if the designated constraints aren't met.
type DeleteTypeMailResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteTypeMailResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteTypeMailResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteTypeMailResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteTypeMailResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteTypeMailResponseValidationError) ErrorName() string {
	return "DeleteTypeMailResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteTypeMailResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteTypeMailResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteTypeMailResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteTypeMailResponseValidationError{}

// Validate checks the field values on GetTypeMailRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetTypeMailRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetTypeMailRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetTypeMailRequestMultiError, or nil if none found.
func (m *GetTypeMailRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetTypeMailRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return GetTypeMailRequestMultiError(errors)
	}

	return nil
}

// GetTypeMailRequestMultiError is an error wrapping multiple validation errors
// returned by GetTypeMailRequest.ValidateAll() if the designated constraints
// aren't met.
type GetTypeMailRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetTypeMailRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetTypeMailRequestMultiError) AllErrors() []error { return m }

// GetTypeMailRequestValidationError is the validation error returned by
// GetTypeMailRequest.Validate if the designated constraints aren't met.
type GetTypeMailRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetTypeMailRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetTypeMailRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetTypeMailRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetTypeMailRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetTypeMailRequestValidationError) ErrorName() string {
	return "GetTypeMailRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetTypeMailRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetTypeMailRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetTypeMailRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetTypeMailRequestValidationError{}

// Validate checks the field values on GetTypeMailResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetTypeMailResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetTypeMailResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetTypeMailResponseMultiError, or nil if none found.
func (m *GetTypeMailResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetTypeMailResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Message

	if all {
		switch v := interface{}(m.GetTypeMail()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetTypeMailResponseValidationError{
					field:  "TypeMail",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetTypeMailResponseValidationError{
					field:  "TypeMail",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTypeMail()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetTypeMailResponseValidationError{
				field:  "TypeMail",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetTypeMailResponseMultiError(errors)
	}

	return nil
}

// GetTypeMailResponseMultiError is an error wrapping multiple validation
// errors returned by GetTypeMailResponse.ValidateAll() if the designated
// constraints aren't met.
type GetTypeMailResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetTypeMailResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetTypeMailResponseMultiError) AllErrors() []error { return m }

// GetTypeMailResponseValidationError is the validation error returned by
// GetTypeMailResponse.Validate if the designated constraints aren't met.
type GetTypeMailResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetTypeMailResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetTypeMailResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetTypeMailResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetTypeMailResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetTypeMailResponseValidationError) ErrorName() string {
	return "GetTypeMailResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetTypeMailResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetTypeMailResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetTypeMailResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetTypeMailResponseValidationError{}

// Validate checks the field values on GetAllTypeMailRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetAllTypeMailRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetAllTypeMailRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetAllTypeMailRequestMultiError, or nil if none found.
func (m *GetAllTypeMailRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetAllTypeMailRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Page

	// no validation rules for Limit

	// no validation rules for Search

	// no validation rules for Sort

	// no validation rules for Order

	// no validation rules for Name

	// no validation rules for CreatedBy

	// no validation rules for CreatedAt

	// no validation rules for UpdatedAt

	if len(errors) > 0 {
		return GetAllTypeMailRequestMultiError(errors)
	}

	return nil
}

// GetAllTypeMailRequestMultiError is an error wrapping multiple validation
// errors returned by GetAllTypeMailRequest.ValidateAll() if the designated
// constraints aren't met.
type GetAllTypeMailRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetAllTypeMailRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetAllTypeMailRequestMultiError) AllErrors() []error { return m }

// GetAllTypeMailRequestValidationError is the validation error returned by
// GetAllTypeMailRequest.Validate if the designated constraints aren't met.
type GetAllTypeMailRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetAllTypeMailRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetAllTypeMailRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetAllTypeMailRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetAllTypeMailRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetAllTypeMailRequestValidationError) ErrorName() string {
	return "GetAllTypeMailRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetAllTypeMailRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetAllTypeMailRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetAllTypeMailRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetAllTypeMailRequestValidationError{}

// Validate checks the field values on GetAllTypeMailResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetAllTypeMailResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetAllTypeMailResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetAllTypeMailResponseMultiError, or nil if none found.
func (m *GetAllTypeMailResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetAllTypeMailResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Message

	// no validation rules for Total

	// no validation rules for Page

	// no validation rules for Limit

	for idx, item := range m.GetTypeMails() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetAllTypeMailResponseValidationError{
						field:  fmt.Sprintf("TypeMails[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetAllTypeMailResponseValidationError{
						field:  fmt.Sprintf("TypeMails[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetAllTypeMailResponseValidationError{
					field:  fmt.Sprintf("TypeMails[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetAllTypeMailResponseMultiError(errors)
	}

	return nil
}

// GetAllTypeMailResponseMultiError is an error wrapping multiple validation
// errors returned by GetAllTypeMailResponse.ValidateAll() if the designated
// constraints aren't met.
type GetAllTypeMailResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetAllTypeMailResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetAllTypeMailResponseMultiError) AllErrors() []error { return m }

// GetAllTypeMailResponseValidationError is the validation error returned by
// GetAllTypeMailResponse.Validate if the designated constraints aren't met.
type GetAllTypeMailResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetAllTypeMailResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetAllTypeMailResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetAllTypeMailResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetAllTypeMailResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetAllTypeMailResponseValidationError) ErrorName() string {
	return "GetAllTypeMailResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetAllTypeMailResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetAllTypeMailResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetAllTypeMailResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetAllTypeMailResponseValidationError{}
