// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: mail_provider/v1/mail_provider.proto

package proto

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on CreateMailProviderRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateMailProviderRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateMailProviderRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateMailProviderRequestMultiError, or nil if none found.
func (m *CreateMailProviderRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateMailProviderRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Email

	// no validation rules for Password

	// no validation rules for UserName

	// no validation rules for Port

	// no validation rules for Host

	// no validation rules for Encryption

	// no validation rules for Name

	// no validation rules for TypeId

	// no validation rules for CreatedBy

	// no validation rules for CreatedAt

	if len(errors) > 0 {
		return CreateMailProviderRequestMultiError(errors)
	}

	return nil
}

// CreateMailProviderRequestMultiError is an error wrapping multiple validation
// errors returned by CreateMailProviderRequest.ValidateAll() if the
// designated constraints aren't met.
type CreateMailProviderRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateMailProviderRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateMailProviderRequestMultiError) AllErrors() []error { return m }

// CreateMailProviderRequestValidationError is the validation error returned by
// CreateMailProviderRequest.Validate if the designated constraints aren't met.
type CreateMailProviderRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateMailProviderRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateMailProviderRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateMailProviderRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateMailProviderRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateMailProviderRequestValidationError) ErrorName() string {
	return "CreateMailProviderRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateMailProviderRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateMailProviderRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateMailProviderRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateMailProviderRequestValidationError{}

// Validate checks the field values on MailProvider with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *MailProvider) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MailProvider with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in MailProviderMultiError, or
// nil if none found.
func (m *MailProvider) ValidateAll() error {
	return m.validate(true)
}

func (m *MailProvider) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Email

	// no validation rules for Password

	// no validation rules for UserName

	// no validation rules for Port

	// no validation rules for Host

	// no validation rules for Encryption

	// no validation rules for Name

	// no validation rules for TypeId

	// no validation rules for CreatedBy

	// no validation rules for CreatedAt

	// no validation rules for UpdatedAt

	if len(errors) > 0 {
		return MailProviderMultiError(errors)
	}

	return nil
}

// MailProviderMultiError is an error wrapping multiple validation errors
// returned by MailProvider.ValidateAll() if the designated constraints aren't met.
type MailProviderMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MailProviderMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MailProviderMultiError) AllErrors() []error { return m }

// MailProviderValidationError is the validation error returned by
// MailProvider.Validate if the designated constraints aren't met.
type MailProviderValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MailProviderValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MailProviderValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MailProviderValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MailProviderValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MailProviderValidationError) ErrorName() string { return "MailProviderValidationError" }

// Error satisfies the builtin error interface
func (e MailProviderValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMailProvider.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MailProviderValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MailProviderValidationError{}

// Validate checks the field values on CreateMailProviderResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateMailProviderResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateMailProviderResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateMailProviderResponseMultiError, or nil if none found.
func (m *CreateMailProviderResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateMailProviderResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Message

	if all {
		switch v := interface{}(m.GetMailProvider()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateMailProviderResponseValidationError{
					field:  "MailProvider",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateMailProviderResponseValidationError{
					field:  "MailProvider",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMailProvider()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateMailProviderResponseValidationError{
				field:  "MailProvider",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateMailProviderResponseMultiError(errors)
	}

	return nil
}

// CreateMailProviderResponseMultiError is an error wrapping multiple
// validation errors returned by CreateMailProviderResponse.ValidateAll() if
// the designated constraints aren't met.
type CreateMailProviderResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateMailProviderResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateMailProviderResponseMultiError) AllErrors() []error { return m }

// CreateMailProviderResponseValidationError is the validation error returned
// by CreateMailProviderResponse.Validate if the designated constraints aren't met.
type CreateMailProviderResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateMailProviderResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateMailProviderResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateMailProviderResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateMailProviderResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateMailProviderResponseValidationError) ErrorName() string {
	return "CreateMailProviderResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateMailProviderResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateMailProviderResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateMailProviderResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateMailProviderResponseValidationError{}

// Validate checks the field values on UpdateMailProviderRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateMailProviderRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateMailProviderRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateMailProviderRequestMultiError, or nil if none found.
func (m *UpdateMailProviderRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateMailProviderRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Email

	// no validation rules for Password

	// no validation rules for UserName

	// no validation rules for Port

	// no validation rules for Host

	// no validation rules for Encryption

	// no validation rules for Name

	// no validation rules for TypeId

	if len(errors) > 0 {
		return UpdateMailProviderRequestMultiError(errors)
	}

	return nil
}

// UpdateMailProviderRequestMultiError is an error wrapping multiple validation
// errors returned by UpdateMailProviderRequest.ValidateAll() if the
// designated constraints aren't met.
type UpdateMailProviderRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateMailProviderRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateMailProviderRequestMultiError) AllErrors() []error { return m }

// UpdateMailProviderRequestValidationError is the validation error returned by
// UpdateMailProviderRequest.Validate if the designated constraints aren't met.
type UpdateMailProviderRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateMailProviderRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateMailProviderRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateMailProviderRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateMailProviderRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateMailProviderRequestValidationError) ErrorName() string {
	return "UpdateMailProviderRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateMailProviderRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateMailProviderRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateMailProviderRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateMailProviderRequestValidationError{}

// Validate checks the field values on UpdateMailProviderResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateMailProviderResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateMailProviderResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateMailProviderResponseMultiError, or nil if none found.
func (m *UpdateMailProviderResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateMailProviderResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Message

	if all {
		switch v := interface{}(m.GetMailProvider()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateMailProviderResponseValidationError{
					field:  "MailProvider",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateMailProviderResponseValidationError{
					field:  "MailProvider",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMailProvider()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateMailProviderResponseValidationError{
				field:  "MailProvider",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateMailProviderResponseMultiError(errors)
	}

	return nil
}

// UpdateMailProviderResponseMultiError is an error wrapping multiple
// validation errors returned by UpdateMailProviderResponse.ValidateAll() if
// the designated constraints aren't met.
type UpdateMailProviderResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateMailProviderResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateMailProviderResponseMultiError) AllErrors() []error { return m }

// UpdateMailProviderResponseValidationError is the validation error returned
// by UpdateMailProviderResponse.Validate if the designated constraints aren't met.
type UpdateMailProviderResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateMailProviderResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateMailProviderResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateMailProviderResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateMailProviderResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateMailProviderResponseValidationError) ErrorName() string {
	return "UpdateMailProviderResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateMailProviderResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateMailProviderResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateMailProviderResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateMailProviderResponseValidationError{}

// Validate checks the field values on DeleteMailProviderRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteMailProviderRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteMailProviderRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteMailProviderRequestMultiError, or nil if none found.
func (m *DeleteMailProviderRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteMailProviderRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Email

	if len(errors) > 0 {
		return DeleteMailProviderRequestMultiError(errors)
	}

	return nil
}

// DeleteMailProviderRequestMultiError is an error wrapping multiple validation
// errors returned by DeleteMailProviderRequest.ValidateAll() if the
// designated constraints aren't met.
type DeleteMailProviderRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteMailProviderRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteMailProviderRequestMultiError) AllErrors() []error { return m }

// DeleteMailProviderRequestValidationError is the validation error returned by
// DeleteMailProviderRequest.Validate if the designated constraints aren't met.
type DeleteMailProviderRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteMailProviderRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteMailProviderRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteMailProviderRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteMailProviderRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteMailProviderRequestValidationError) ErrorName() string {
	return "DeleteMailProviderRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteMailProviderRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteMailProviderRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteMailProviderRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteMailProviderRequestValidationError{}

// Validate checks the field values on DeleteMailProviderResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteMailProviderResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteMailProviderResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteMailProviderResponseMultiError, or nil if none found.
func (m *DeleteMailProviderResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteMailProviderResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Message

	if len(errors) > 0 {
		return DeleteMailProviderResponseMultiError(errors)
	}

	return nil
}

// DeleteMailProviderResponseMultiError is an error wrapping multiple
// validation errors returned by DeleteMailProviderResponse.ValidateAll() if
// the designated constraints aren't met.
type DeleteMailProviderResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteMailProviderResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteMailProviderResponseMultiError) AllErrors() []error { return m }

// DeleteMailProviderResponseValidationError is the validation error returned
// by DeleteMailProviderResponse.Validate if the designated constraints aren't met.
type DeleteMailProviderResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteMailProviderResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteMailProviderResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteMailProviderResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteMailProviderResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteMailProviderResponseValidationError) ErrorName() string {
	return "DeleteMailProviderResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteMailProviderResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteMailProviderResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteMailProviderResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteMailProviderResponseValidationError{}

// Validate checks the field values on GetMailProviderRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetMailProviderRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetMailProviderRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetMailProviderRequestMultiError, or nil if none found.
func (m *GetMailProviderRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetMailProviderRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Email

	if len(errors) > 0 {
		return GetMailProviderRequestMultiError(errors)
	}

	return nil
}

// GetMailProviderRequestMultiError is an error wrapping multiple validation
// errors returned by GetMailProviderRequest.ValidateAll() if the designated
// constraints aren't met.
type GetMailProviderRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetMailProviderRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetMailProviderRequestMultiError) AllErrors() []error { return m }

// GetMailProviderRequestValidationError is the validation error returned by
// GetMailProviderRequest.Validate if the designated constraints aren't met.
type GetMailProviderRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetMailProviderRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetMailProviderRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetMailProviderRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetMailProviderRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetMailProviderRequestValidationError) ErrorName() string {
	return "GetMailProviderRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetMailProviderRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetMailProviderRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetMailProviderRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetMailProviderRequestValidationError{}

// Validate checks the field values on GetMailProviderResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetMailProviderResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetMailProviderResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetMailProviderResponseMultiError, or nil if none found.
func (m *GetMailProviderResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetMailProviderResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Message

	if all {
		switch v := interface{}(m.GetMailProvider()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetMailProviderResponseValidationError{
					field:  "MailProvider",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetMailProviderResponseValidationError{
					field:  "MailProvider",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMailProvider()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetMailProviderResponseValidationError{
				field:  "MailProvider",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetMailProviderResponseMultiError(errors)
	}

	return nil
}

// GetMailProviderResponseMultiError is an error wrapping multiple validation
// errors returned by GetMailProviderResponse.ValidateAll() if the designated
// constraints aren't met.
type GetMailProviderResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetMailProviderResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetMailProviderResponseMultiError) AllErrors() []error { return m }

// GetMailProviderResponseValidationError is the validation error returned by
// GetMailProviderResponse.Validate if the designated constraints aren't met.
type GetMailProviderResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetMailProviderResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetMailProviderResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetMailProviderResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetMailProviderResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetMailProviderResponseValidationError) ErrorName() string {
	return "GetMailProviderResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetMailProviderResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetMailProviderResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetMailProviderResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetMailProviderResponseValidationError{}

// Validate checks the field values on GetAllMailProviderRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetAllMailProviderRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetAllMailProviderRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetAllMailProviderRequestMultiError, or nil if none found.
func (m *GetAllMailProviderRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetAllMailProviderRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Page

	// no validation rules for Limit

	// no validation rules for Search

	// no validation rules for Sort

	// no validation rules for Order

	// no validation rules for Name

	// no validation rules for TypeId

	// no validation rules for CreatedBy

	// no validation rules for CreatedAt

	// no validation rules for UpdatedAt

	if len(errors) > 0 {
		return GetAllMailProviderRequestMultiError(errors)
	}

	return nil
}

// GetAllMailProviderRequestMultiError is an error wrapping multiple validation
// errors returned by GetAllMailProviderRequest.ValidateAll() if the
// designated constraints aren't met.
type GetAllMailProviderRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetAllMailProviderRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetAllMailProviderRequestMultiError) AllErrors() []error { return m }

// GetAllMailProviderRequestValidationError is the validation error returned by
// GetAllMailProviderRequest.Validate if the designated constraints aren't met.
type GetAllMailProviderRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetAllMailProviderRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetAllMailProviderRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetAllMailProviderRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetAllMailProviderRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetAllMailProviderRequestValidationError) ErrorName() string {
	return "GetAllMailProviderRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetAllMailProviderRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetAllMailProviderRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetAllMailProviderRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetAllMailProviderRequestValidationError{}

// Validate checks the field values on GetAllMailProviderResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetAllMailProviderResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetAllMailProviderResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetAllMailProviderResponseMultiError, or nil if none found.
func (m *GetAllMailProviderResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetAllMailProviderResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Message

	// no validation rules for Total

	// no validation rules for Page

	// no validation rules for Limit

	for idx, item := range m.GetMailProviders() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetAllMailProviderResponseValidationError{
						field:  fmt.Sprintf("MailProviders[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetAllMailProviderResponseValidationError{
						field:  fmt.Sprintf("MailProviders[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetAllMailProviderResponseValidationError{
					field:  fmt.Sprintf("MailProviders[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetAllMailProviderResponseMultiError(errors)
	}

	return nil
}

// GetAllMailProviderResponseMultiError is an error wrapping multiple
// validation errors returned by GetAllMailProviderResponse.ValidateAll() if
// the designated constraints aren't met.
type GetAllMailProviderResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetAllMailProviderResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetAllMailProviderResponseMultiError) AllErrors() []error { return m }

// GetAllMailProviderResponseValidationError is the validation error returned
// by GetAllMailProviderResponse.Validate if the designated constraints aren't met.
type GetAllMailProviderResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetAllMailProviderResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetAllMailProviderResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetAllMailProviderResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetAllMailProviderResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetAllMailProviderResponseValidationError) ErrorName() string {
	return "GetAllMailProviderResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetAllMailProviderResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetAllMailProviderResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetAllMailProviderResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetAllMailProviderResponseValidationError{}
