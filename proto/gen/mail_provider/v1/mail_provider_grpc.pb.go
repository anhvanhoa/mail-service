// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: mail_provider/v1/mail_provider.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	MailProviderService_CreateMailProvider_FullMethodName = "/exam.v1.MailProviderService/CreateMailProvider"
	MailProviderService_UpdateMailProvider_FullMethodName = "/exam.v1.MailProviderService/UpdateMailProvider"
	MailProviderService_DeleteMailProvider_FullMethodName = "/exam.v1.MailProviderService/DeleteMailProvider"
	MailProviderService_GetMailProvider_FullMethodName    = "/exam.v1.MailProviderService/GetMailProvider"
	MailProviderService_GetAllMailProvider_FullMethodName = "/exam.v1.MailProviderService/GetAllMailProvider"
)

// MailProviderServiceClient is the client API for MailProviderService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MailProviderServiceClient interface {
	CreateMailProvider(ctx context.Context, in *CreateMailProviderRequest, opts ...grpc.CallOption) (*CreateMailProviderResponse, error)
	UpdateMailProvider(ctx context.Context, in *UpdateMailProviderRequest, opts ...grpc.CallOption) (*UpdateMailProviderResponse, error)
	DeleteMailProvider(ctx context.Context, in *DeleteMailProviderRequest, opts ...grpc.CallOption) (*DeleteMailProviderResponse, error)
	GetMailProvider(ctx context.Context, in *GetMailProviderRequest, opts ...grpc.CallOption) (*GetMailProviderResponse, error)
	GetAllMailProvider(ctx context.Context, in *GetAllMailProviderRequest, opts ...grpc.CallOption) (*GetAllMailProviderResponse, error)
}

type mailProviderServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMailProviderServiceClient(cc grpc.ClientConnInterface) MailProviderServiceClient {
	return &mailProviderServiceClient{cc}
}

func (c *mailProviderServiceClient) CreateMailProvider(ctx context.Context, in *CreateMailProviderRequest, opts ...grpc.CallOption) (*CreateMailProviderResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateMailProviderResponse)
	err := c.cc.Invoke(ctx, MailProviderService_CreateMailProvider_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mailProviderServiceClient) UpdateMailProvider(ctx context.Context, in *UpdateMailProviderRequest, opts ...grpc.CallOption) (*UpdateMailProviderResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateMailProviderResponse)
	err := c.cc.Invoke(ctx, MailProviderService_UpdateMailProvider_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mailProviderServiceClient) DeleteMailProvider(ctx context.Context, in *DeleteMailProviderRequest, opts ...grpc.CallOption) (*DeleteMailProviderResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteMailProviderResponse)
	err := c.cc.Invoke(ctx, MailProviderService_DeleteMailProvider_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mailProviderServiceClient) GetMailProvider(ctx context.Context, in *GetMailProviderRequest, opts ...grpc.CallOption) (*GetMailProviderResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetMailProviderResponse)
	err := c.cc.Invoke(ctx, MailProviderService_GetMailProvider_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mailProviderServiceClient) GetAllMailProvider(ctx context.Context, in *GetAllMailProviderRequest, opts ...grpc.CallOption) (*GetAllMailProviderResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetAllMailProviderResponse)
	err := c.cc.Invoke(ctx, MailProviderService_GetAllMailProvider_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MailProviderServiceServer is the server API for MailProviderService service.
// All implementations must embed UnimplementedMailProviderServiceServer
// for forward compatibility.
type MailProviderServiceServer interface {
	CreateMailProvider(context.Context, *CreateMailProviderRequest) (*CreateMailProviderResponse, error)
	UpdateMailProvider(context.Context, *UpdateMailProviderRequest) (*UpdateMailProviderResponse, error)
	DeleteMailProvider(context.Context, *DeleteMailProviderRequest) (*DeleteMailProviderResponse, error)
	GetMailProvider(context.Context, *GetMailProviderRequest) (*GetMailProviderResponse, error)
	GetAllMailProvider(context.Context, *GetAllMailProviderRequest) (*GetAllMailProviderResponse, error)
	mustEmbedUnimplementedMailProviderServiceServer()
}

// UnimplementedMailProviderServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedMailProviderServiceServer struct{}

func (UnimplementedMailProviderServiceServer) CreateMailProvider(context.Context, *CreateMailProviderRequest) (*CreateMailProviderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateMailProvider not implemented")
}
func (UnimplementedMailProviderServiceServer) UpdateMailProvider(context.Context, *UpdateMailProviderRequest) (*UpdateMailProviderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateMailProvider not implemented")
}
func (UnimplementedMailProviderServiceServer) DeleteMailProvider(context.Context, *DeleteMailProviderRequest) (*DeleteMailProviderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteMailProvider not implemented")
}
func (UnimplementedMailProviderServiceServer) GetMailProvider(context.Context, *GetMailProviderRequest) (*GetMailProviderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMailProvider not implemented")
}
func (UnimplementedMailProviderServiceServer) GetAllMailProvider(context.Context, *GetAllMailProviderRequest) (*GetAllMailProviderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllMailProvider not implemented")
}
func (UnimplementedMailProviderServiceServer) mustEmbedUnimplementedMailProviderServiceServer() {}
func (UnimplementedMailProviderServiceServer) testEmbeddedByValue()                             {}

// UnsafeMailProviderServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MailProviderServiceServer will
// result in compilation errors.
type UnsafeMailProviderServiceServer interface {
	mustEmbedUnimplementedMailProviderServiceServer()
}

func RegisterMailProviderServiceServer(s grpc.ServiceRegistrar, srv MailProviderServiceServer) {
	// If the following call pancis, it indicates UnimplementedMailProviderServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&MailProviderService_ServiceDesc, srv)
}

func _MailProviderService_CreateMailProvider_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateMailProviderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MailProviderServiceServer).CreateMailProvider(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MailProviderService_CreateMailProvider_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MailProviderServiceServer).CreateMailProvider(ctx, req.(*CreateMailProviderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MailProviderService_UpdateMailProvider_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateMailProviderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MailProviderServiceServer).UpdateMailProvider(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MailProviderService_UpdateMailProvider_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MailProviderServiceServer).UpdateMailProvider(ctx, req.(*UpdateMailProviderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MailProviderService_DeleteMailProvider_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteMailProviderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MailProviderServiceServer).DeleteMailProvider(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MailProviderService_DeleteMailProvider_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MailProviderServiceServer).DeleteMailProvider(ctx, req.(*DeleteMailProviderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MailProviderService_GetMailProvider_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMailProviderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MailProviderServiceServer).GetMailProvider(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MailProviderService_GetMailProvider_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MailProviderServiceServer).GetMailProvider(ctx, req.(*GetMailProviderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MailProviderService_GetAllMailProvider_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllMailProviderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MailProviderServiceServer).GetAllMailProvider(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MailProviderService_GetAllMailProvider_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MailProviderServiceServer).GetAllMailProvider(ctx, req.(*GetAllMailProviderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// MailProviderService_ServiceDesc is the grpc.ServiceDesc for MailProviderService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MailProviderService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "exam.v1.MailProviderService",
	HandlerType: (*MailProviderServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateMailProvider",
			Handler:    _MailProviderService_CreateMailProvider_Handler,
		},
		{
			MethodName: "UpdateMailProvider",
			Handler:    _MailProviderService_UpdateMailProvider_Handler,
		},
		{
			MethodName: "DeleteMailProvider",
			Handler:    _MailProviderService_DeleteMailProvider_Handler,
		},
		{
			MethodName: "GetMailProvider",
			Handler:    _MailProviderService_GetMailProvider_Handler,
		},
		{
			MethodName: "GetAllMailProvider",
			Handler:    _MailProviderService_GetAllMailProvider_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "mail_provider/v1/mail_provider.proto",
}
