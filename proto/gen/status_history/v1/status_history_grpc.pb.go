// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             (unknown)
// source: status_history/v1/status_history.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	StatusHistoryService_CreateStatusHistory_FullMethodName                   = "/exam.v1.StatusHistoryService/CreateStatusHistory"
	StatusHistoryService_UpdateStatusHistory_FullMethodName                   = "/exam.v1.StatusHistoryService/UpdateStatusHistory"
	StatusHistoryService_DeleteStatusHistory_FullMethodName                   = "/exam.v1.StatusHistoryService/DeleteStatusHistory"
	StatusHistoryService_GetStatusHistory_FullMethodName                      = "/exam.v1.StatusHistoryService/GetStatusHistory"
	StatusHistoryService_GetAllStatusHistory_FullMethodName                   = "/exam.v1.StatusHistoryService/GetAllStatusHistory"
	StatusHistoryService_GetStatusHistoryByMailHistoryId_FullMethodName       = "/exam.v1.StatusHistoryService/GetStatusHistoryByMailHistoryId"
	StatusHistoryService_GetLatestStatusHistoryByMailHistoryId_FullMethodName = "/exam.v1.StatusHistoryService/GetLatestStatusHistoryByMailHistoryId"
)

// StatusHistoryServiceClient is the client API for StatusHistoryService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type StatusHistoryServiceClient interface {
	CreateStatusHistory(ctx context.Context, in *CreateStatusHistoryRequest, opts ...grpc.CallOption) (*CreateStatusHistoryResponse, error)
	UpdateStatusHistory(ctx context.Context, in *UpdateStatusHistoryRequest, opts ...grpc.CallOption) (*UpdateStatusHistoryResponse, error)
	DeleteStatusHistory(ctx context.Context, in *DeleteStatusHistoryRequest, opts ...grpc.CallOption) (*DeleteStatusHistoryResponse, error)
	GetStatusHistory(ctx context.Context, in *GetStatusHistoryRequest, opts ...grpc.CallOption) (*GetStatusHistoryResponse, error)
	GetAllStatusHistory(ctx context.Context, in *GetAllStatusHistoryRequest, opts ...grpc.CallOption) (*GetAllStatusHistoryResponse, error)
	GetStatusHistoryByMailHistoryId(ctx context.Context, in *GetStatusHistoryByMailHistoryIdRequest, opts ...grpc.CallOption) (*GetStatusHistoryByMailHistoryIdResponse, error)
	GetLatestStatusHistoryByMailHistoryId(ctx context.Context, in *GetLatestStatusHistoryByMailHistoryIdRequest, opts ...grpc.CallOption) (*GetLatestStatusHistoryByMailHistoryIdResponse, error)
}

type statusHistoryServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewStatusHistoryServiceClient(cc grpc.ClientConnInterface) StatusHistoryServiceClient {
	return &statusHistoryServiceClient{cc}
}

func (c *statusHistoryServiceClient) CreateStatusHistory(ctx context.Context, in *CreateStatusHistoryRequest, opts ...grpc.CallOption) (*CreateStatusHistoryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateStatusHistoryResponse)
	err := c.cc.Invoke(ctx, StatusHistoryService_CreateStatusHistory_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *statusHistoryServiceClient) UpdateStatusHistory(ctx context.Context, in *UpdateStatusHistoryRequest, opts ...grpc.CallOption) (*UpdateStatusHistoryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateStatusHistoryResponse)
	err := c.cc.Invoke(ctx, StatusHistoryService_UpdateStatusHistory_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *statusHistoryServiceClient) DeleteStatusHistory(ctx context.Context, in *DeleteStatusHistoryRequest, opts ...grpc.CallOption) (*DeleteStatusHistoryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteStatusHistoryResponse)
	err := c.cc.Invoke(ctx, StatusHistoryService_DeleteStatusHistory_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *statusHistoryServiceClient) GetStatusHistory(ctx context.Context, in *GetStatusHistoryRequest, opts ...grpc.CallOption) (*GetStatusHistoryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetStatusHistoryResponse)
	err := c.cc.Invoke(ctx, StatusHistoryService_GetStatusHistory_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *statusHistoryServiceClient) GetAllStatusHistory(ctx context.Context, in *GetAllStatusHistoryRequest, opts ...grpc.CallOption) (*GetAllStatusHistoryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetAllStatusHistoryResponse)
	err := c.cc.Invoke(ctx, StatusHistoryService_GetAllStatusHistory_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *statusHistoryServiceClient) GetStatusHistoryByMailHistoryId(ctx context.Context, in *GetStatusHistoryByMailHistoryIdRequest, opts ...grpc.CallOption) (*GetStatusHistoryByMailHistoryIdResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetStatusHistoryByMailHistoryIdResponse)
	err := c.cc.Invoke(ctx, StatusHistoryService_GetStatusHistoryByMailHistoryId_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *statusHistoryServiceClient) GetLatestStatusHistoryByMailHistoryId(ctx context.Context, in *GetLatestStatusHistoryByMailHistoryIdRequest, opts ...grpc.CallOption) (*GetLatestStatusHistoryByMailHistoryIdResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetLatestStatusHistoryByMailHistoryIdResponse)
	err := c.cc.Invoke(ctx, StatusHistoryService_GetLatestStatusHistoryByMailHistoryId_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// StatusHistoryServiceServer is the server API for StatusHistoryService service.
// All implementations must embed UnimplementedStatusHistoryServiceServer
// for forward compatibility
type StatusHistoryServiceServer interface {
	CreateStatusHistory(context.Context, *CreateStatusHistoryRequest) (*CreateStatusHistoryResponse, error)
	UpdateStatusHistory(context.Context, *UpdateStatusHistoryRequest) (*UpdateStatusHistoryResponse, error)
	DeleteStatusHistory(context.Context, *DeleteStatusHistoryRequest) (*DeleteStatusHistoryResponse, error)
	GetStatusHistory(context.Context, *GetStatusHistoryRequest) (*GetStatusHistoryResponse, error)
	GetAllStatusHistory(context.Context, *GetAllStatusHistoryRequest) (*GetAllStatusHistoryResponse, error)
	GetStatusHistoryByMailHistoryId(context.Context, *GetStatusHistoryByMailHistoryIdRequest) (*GetStatusHistoryByMailHistoryIdResponse, error)
	GetLatestStatusHistoryByMailHistoryId(context.Context, *GetLatestStatusHistoryByMailHistoryIdRequest) (*GetLatestStatusHistoryByMailHistoryIdResponse, error)
	mustEmbedUnimplementedStatusHistoryServiceServer()
}

// UnimplementedStatusHistoryServiceServer must be embedded to have forward compatible implementations.
type UnimplementedStatusHistoryServiceServer struct {
}

func (UnimplementedStatusHistoryServiceServer) CreateStatusHistory(context.Context, *CreateStatusHistoryRequest) (*CreateStatusHistoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateStatusHistory not implemented")
}
func (UnimplementedStatusHistoryServiceServer) UpdateStatusHistory(context.Context, *UpdateStatusHistoryRequest) (*UpdateStatusHistoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateStatusHistory not implemented")
}
func (UnimplementedStatusHistoryServiceServer) DeleteStatusHistory(context.Context, *DeleteStatusHistoryRequest) (*DeleteStatusHistoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteStatusHistory not implemented")
}
func (UnimplementedStatusHistoryServiceServer) GetStatusHistory(context.Context, *GetStatusHistoryRequest) (*GetStatusHistoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStatusHistory not implemented")
}
func (UnimplementedStatusHistoryServiceServer) GetAllStatusHistory(context.Context, *GetAllStatusHistoryRequest) (*GetAllStatusHistoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllStatusHistory not implemented")
}
func (UnimplementedStatusHistoryServiceServer) GetStatusHistoryByMailHistoryId(context.Context, *GetStatusHistoryByMailHistoryIdRequest) (*GetStatusHistoryByMailHistoryIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStatusHistoryByMailHistoryId not implemented")
}
func (UnimplementedStatusHistoryServiceServer) GetLatestStatusHistoryByMailHistoryId(context.Context, *GetLatestStatusHistoryByMailHistoryIdRequest) (*GetLatestStatusHistoryByMailHistoryIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLatestStatusHistoryByMailHistoryId not implemented")
}
func (UnimplementedStatusHistoryServiceServer) mustEmbedUnimplementedStatusHistoryServiceServer() {}

// UnsafeStatusHistoryServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StatusHistoryServiceServer will
// result in compilation errors.
type UnsafeStatusHistoryServiceServer interface {
	mustEmbedUnimplementedStatusHistoryServiceServer()
}

func RegisterStatusHistoryServiceServer(s grpc.ServiceRegistrar, srv StatusHistoryServiceServer) {
	s.RegisterService(&StatusHistoryService_ServiceDesc, srv)
}

func _StatusHistoryService_CreateStatusHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateStatusHistoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StatusHistoryServiceServer).CreateStatusHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StatusHistoryService_CreateStatusHistory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StatusHistoryServiceServer).CreateStatusHistory(ctx, req.(*CreateStatusHistoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StatusHistoryService_UpdateStatusHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateStatusHistoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StatusHistoryServiceServer).UpdateStatusHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StatusHistoryService_UpdateStatusHistory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StatusHistoryServiceServer).UpdateStatusHistory(ctx, req.(*UpdateStatusHistoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StatusHistoryService_DeleteStatusHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteStatusHistoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StatusHistoryServiceServer).DeleteStatusHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StatusHistoryService_DeleteStatusHistory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StatusHistoryServiceServer).DeleteStatusHistory(ctx, req.(*DeleteStatusHistoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StatusHistoryService_GetStatusHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStatusHistoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StatusHistoryServiceServer).GetStatusHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StatusHistoryService_GetStatusHistory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StatusHistoryServiceServer).GetStatusHistory(ctx, req.(*GetStatusHistoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StatusHistoryService_GetAllStatusHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllStatusHistoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StatusHistoryServiceServer).GetAllStatusHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StatusHistoryService_GetAllStatusHistory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StatusHistoryServiceServer).GetAllStatusHistory(ctx, req.(*GetAllStatusHistoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StatusHistoryService_GetStatusHistoryByMailHistoryId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStatusHistoryByMailHistoryIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StatusHistoryServiceServer).GetStatusHistoryByMailHistoryId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StatusHistoryService_GetStatusHistoryByMailHistoryId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StatusHistoryServiceServer).GetStatusHistoryByMailHistoryId(ctx, req.(*GetStatusHistoryByMailHistoryIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StatusHistoryService_GetLatestStatusHistoryByMailHistoryId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLatestStatusHistoryByMailHistoryIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StatusHistoryServiceServer).GetLatestStatusHistoryByMailHistoryId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StatusHistoryService_GetLatestStatusHistoryByMailHistoryId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StatusHistoryServiceServer).GetLatestStatusHistoryByMailHistoryId(ctx, req.(*GetLatestStatusHistoryByMailHistoryIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// StatusHistoryService_ServiceDesc is the grpc.ServiceDesc for StatusHistoryService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var StatusHistoryService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "exam.v1.StatusHistoryService",
	HandlerType: (*StatusHistoryServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateStatusHistory",
			Handler:    _StatusHistoryService_CreateStatusHistory_Handler,
		},
		{
			MethodName: "UpdateStatusHistory",
			Handler:    _StatusHistoryService_UpdateStatusHistory_Handler,
		},
		{
			MethodName: "DeleteStatusHistory",
			Handler:    _StatusHistoryService_DeleteStatusHistory_Handler,
		},
		{
			MethodName: "GetStatusHistory",
			Handler:    _StatusHistoryService_GetStatusHistory_Handler,
		},
		{
			MethodName: "GetAllStatusHistory",
			Handler:    _StatusHistoryService_GetAllStatusHistory_Handler,
		},
		{
			MethodName: "GetStatusHistoryByMailHistoryId",
			Handler:    _StatusHistoryService_GetStatusHistoryByMailHistoryId_Handler,
		},
		{
			MethodName: "GetLatestStatusHistoryByMailHistoryId",
			Handler:    _StatusHistoryService_GetLatestStatusHistoryByMailHistoryId_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "status_history/v1/status_history.proto",
}
