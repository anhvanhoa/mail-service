// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: status_history/v1/status_history.proto

package proto

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on CreateStatusHistoryRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateStatusHistoryRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateStatusHistoryRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateStatusHistoryRequestMultiError, or nil if none found.
func (m *CreateStatusHistoryRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateStatusHistoryRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Status

	// no validation rules for MailHistoryId

	// no validation rules for Message

	// no validation rules for CreatedAt

	if len(errors) > 0 {
		return CreateStatusHistoryRequestMultiError(errors)
	}

	return nil
}

// CreateStatusHistoryRequestMultiError is an error wrapping multiple
// validation errors returned by CreateStatusHistoryRequest.ValidateAll() if
// the designated constraints aren't met.
type CreateStatusHistoryRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateStatusHistoryRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateStatusHistoryRequestMultiError) AllErrors() []error { return m }

// CreateStatusHistoryRequestValidationError is the validation error returned
// by CreateStatusHistoryRequest.Validate if the designated constraints aren't met.
type CreateStatusHistoryRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateStatusHistoryRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateStatusHistoryRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateStatusHistoryRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateStatusHistoryRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateStatusHistoryRequestValidationError) ErrorName() string {
	return "CreateStatusHistoryRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateStatusHistoryRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateStatusHistoryRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateStatusHistoryRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateStatusHistoryRequestValidationError{}

// Validate checks the field values on StatusHistory with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *StatusHistory) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on StatusHistory with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in StatusHistoryMultiError, or
// nil if none found.
func (m *StatusHistory) ValidateAll() error {
	return m.validate(true)
}

func (m *StatusHistory) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Status

	// no validation rules for MailHistoryId

	// no validation rules for Message

	// no validation rules for CreatedAt

	if len(errors) > 0 {
		return StatusHistoryMultiError(errors)
	}

	return nil
}

// StatusHistoryMultiError is an error wrapping multiple validation errors
// returned by StatusHistory.ValidateAll() if the designated constraints
// aren't met.
type StatusHistoryMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m StatusHistoryMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m StatusHistoryMultiError) AllErrors() []error { return m }

// StatusHistoryValidationError is the validation error returned by
// StatusHistory.Validate if the designated constraints aren't met.
type StatusHistoryValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StatusHistoryValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StatusHistoryValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StatusHistoryValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StatusHistoryValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StatusHistoryValidationError) ErrorName() string { return "StatusHistoryValidationError" }

// Error satisfies the builtin error interface
func (e StatusHistoryValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStatusHistory.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StatusHistoryValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StatusHistoryValidationError{}

// Validate checks the field values on CreateStatusHistoryResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateStatusHistoryResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateStatusHistoryResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateStatusHistoryResponseMultiError, or nil if none found.
func (m *CreateStatusHistoryResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateStatusHistoryResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Message

	if all {
		switch v := interface{}(m.GetStatusHistory()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateStatusHistoryResponseValidationError{
					field:  "StatusHistory",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateStatusHistoryResponseValidationError{
					field:  "StatusHistory",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetStatusHistory()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateStatusHistoryResponseValidationError{
				field:  "StatusHistory",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateStatusHistoryResponseMultiError(errors)
	}

	return nil
}

// CreateStatusHistoryResponseMultiError is an error wrapping multiple
// validation errors returned by CreateStatusHistoryResponse.ValidateAll() if
// the designated constraints aren't met.
type CreateStatusHistoryResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateStatusHistoryResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateStatusHistoryResponseMultiError) AllErrors() []error { return m }

// CreateStatusHistoryResponseValidationError is the validation error returned
// by CreateStatusHistoryResponse.Validate if the designated constraints
// aren't met.
type CreateStatusHistoryResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateStatusHistoryResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateStatusHistoryResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateStatusHistoryResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateStatusHistoryResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateStatusHistoryResponseValidationError) ErrorName() string {
	return "CreateStatusHistoryResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateStatusHistoryResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateStatusHistoryResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateStatusHistoryResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateStatusHistoryResponseValidationError{}

// Validate checks the field values on UpdateStatusHistoryRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateStatusHistoryRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateStatusHistoryRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateStatusHistoryRequestMultiError, or nil if none found.
func (m *UpdateStatusHistoryRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateStatusHistoryRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Status

	// no validation rules for MailHistoryId

	// no validation rules for Message

	if len(errors) > 0 {
		return UpdateStatusHistoryRequestMultiError(errors)
	}

	return nil
}

// UpdateStatusHistoryRequestMultiError is an error wrapping multiple
// validation errors returned by UpdateStatusHistoryRequest.ValidateAll() if
// the designated constraints aren't met.
type UpdateStatusHistoryRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateStatusHistoryRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateStatusHistoryRequestMultiError) AllErrors() []error { return m }

// UpdateStatusHistoryRequestValidationError is the validation error returned
// by UpdateStatusHistoryRequest.Validate if the designated constraints aren't met.
type UpdateStatusHistoryRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateStatusHistoryRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateStatusHistoryRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateStatusHistoryRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateStatusHistoryRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateStatusHistoryRequestValidationError) ErrorName() string {
	return "UpdateStatusHistoryRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateStatusHistoryRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateStatusHistoryRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateStatusHistoryRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateStatusHistoryRequestValidationError{}

// Validate checks the field values on UpdateStatusHistoryResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateStatusHistoryResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateStatusHistoryResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateStatusHistoryResponseMultiError, or nil if none found.
func (m *UpdateStatusHistoryResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateStatusHistoryResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Message

	if all {
		switch v := interface{}(m.GetStatusHistory()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateStatusHistoryResponseValidationError{
					field:  "StatusHistory",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateStatusHistoryResponseValidationError{
					field:  "StatusHistory",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetStatusHistory()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateStatusHistoryResponseValidationError{
				field:  "StatusHistory",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateStatusHistoryResponseMultiError(errors)
	}

	return nil
}

// UpdateStatusHistoryResponseMultiError is an error wrapping multiple
// validation errors returned by UpdateStatusHistoryResponse.ValidateAll() if
// the designated constraints aren't met.
type UpdateStatusHistoryResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateStatusHistoryResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateStatusHistoryResponseMultiError) AllErrors() []error { return m }

// UpdateStatusHistoryResponseValidationError is the validation error returned
// by UpdateStatusHistoryResponse.Validate if the designated constraints
// aren't met.
type UpdateStatusHistoryResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateStatusHistoryResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateStatusHistoryResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateStatusHistoryResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateStatusHistoryResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateStatusHistoryResponseValidationError) ErrorName() string {
	return "UpdateStatusHistoryResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateStatusHistoryResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateStatusHistoryResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateStatusHistoryResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateStatusHistoryResponseValidationError{}

// Validate checks the field values on DeleteStatusHistoryRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteStatusHistoryRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteStatusHistoryRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteStatusHistoryRequestMultiError, or nil if none found.
func (m *DeleteStatusHistoryRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteStatusHistoryRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Status

	// no validation rules for MailHistoryId

	if len(errors) > 0 {
		return DeleteStatusHistoryRequestMultiError(errors)
	}

	return nil
}

// DeleteStatusHistoryRequestMultiError is an error wrapping multiple
// validation errors returned by DeleteStatusHistoryRequest.ValidateAll() if
// the designated constraints aren't met.
type DeleteStatusHistoryRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteStatusHistoryRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteStatusHistoryRequestMultiError) AllErrors() []error { return m }

// DeleteStatusHistoryRequestValidationError is the validation error returned
// by DeleteStatusHistoryRequest.Validate if the designated constraints aren't met.
type DeleteStatusHistoryRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteStatusHistoryRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteStatusHistoryRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteStatusHistoryRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteStatusHistoryRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteStatusHistoryRequestValidationError) ErrorName() string {
	return "DeleteStatusHistoryRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteStatusHistoryRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteStatusHistoryRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteStatusHistoryRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteStatusHistoryRequestValidationError{}

// Validate checks the field values on DeleteStatusHistoryResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteStatusHistoryResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteStatusHistoryResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteStatusHistoryResponseMultiError, or nil if none found.
func (m *DeleteStatusHistoryResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteStatusHistoryResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Message

	if len(errors) > 0 {
		return DeleteStatusHistoryResponseMultiError(errors)
	}

	return nil
}

// DeleteStatusHistoryResponseMultiError is an error wrapping multiple
// validation errors returned by DeleteStatusHistoryResponse.ValidateAll() if
// the designated constraints aren't met.
type DeleteStatusHistoryResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteStatusHistoryResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteStatusHistoryResponseMultiError) AllErrors() []error { return m }

// DeleteStatusHistoryResponseValidationError is the validation error returned
// by DeleteStatusHistoryResponse.Validate if the designated constraints
// aren't met.
type DeleteStatusHistoryResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteStatusHistoryResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteStatusHistoryResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteStatusHistoryResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteStatusHistoryResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteStatusHistoryResponseValidationError) ErrorName() string {
	return "DeleteStatusHistoryResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteStatusHistoryResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteStatusHistoryResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteStatusHistoryResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteStatusHistoryResponseValidationError{}

// Validate checks the field values on GetStatusHistoryRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetStatusHistoryRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetStatusHistoryRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetStatusHistoryRequestMultiError, or nil if none found.
func (m *GetStatusHistoryRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetStatusHistoryRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Status

	// no validation rules for MailHistoryId

	if len(errors) > 0 {
		return GetStatusHistoryRequestMultiError(errors)
	}

	return nil
}

// GetStatusHistoryRequestMultiError is an error wrapping multiple validation
// errors returned by GetStatusHistoryRequest.ValidateAll() if the designated
// constraints aren't met.
type GetStatusHistoryRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetStatusHistoryRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetStatusHistoryRequestMultiError) AllErrors() []error { return m }

// GetStatusHistoryRequestValidationError is the validation error returned by
// GetStatusHistoryRequest.Validate if the designated constraints aren't met.
type GetStatusHistoryRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetStatusHistoryRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetStatusHistoryRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetStatusHistoryRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetStatusHistoryRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetStatusHistoryRequestValidationError) ErrorName() string {
	return "GetStatusHistoryRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetStatusHistoryRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetStatusHistoryRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetStatusHistoryRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetStatusHistoryRequestValidationError{}

// Validate checks the field values on GetStatusHistoryResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetStatusHistoryResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetStatusHistoryResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetStatusHistoryResponseMultiError, or nil if none found.
func (m *GetStatusHistoryResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetStatusHistoryResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Message

	if all {
		switch v := interface{}(m.GetStatusHistory()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetStatusHistoryResponseValidationError{
					field:  "StatusHistory",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetStatusHistoryResponseValidationError{
					field:  "StatusHistory",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetStatusHistory()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetStatusHistoryResponseValidationError{
				field:  "StatusHistory",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetStatusHistoryResponseMultiError(errors)
	}

	return nil
}

// GetStatusHistoryResponseMultiError is an error wrapping multiple validation
// errors returned by GetStatusHistoryResponse.ValidateAll() if the designated
// constraints aren't met.
type GetStatusHistoryResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetStatusHistoryResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetStatusHistoryResponseMultiError) AllErrors() []error { return m }

// GetStatusHistoryResponseValidationError is the validation error returned by
// GetStatusHistoryResponse.Validate if the designated constraints aren't met.
type GetStatusHistoryResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetStatusHistoryResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetStatusHistoryResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetStatusHistoryResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetStatusHistoryResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetStatusHistoryResponseValidationError) ErrorName() string {
	return "GetStatusHistoryResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetStatusHistoryResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetStatusHistoryResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetStatusHistoryResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetStatusHistoryResponseValidationError{}

// Validate checks the field values on GetAllStatusHistoryRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetAllStatusHistoryRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetAllStatusHistoryRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetAllStatusHistoryRequestMultiError, or nil if none found.
func (m *GetAllStatusHistoryRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetAllStatusHistoryRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Page

	// no validation rules for Limit

	// no validation rules for Search

	// no validation rules for Sort

	// no validation rules for Order

	// no validation rules for Status

	// no validation rules for MailHistoryId

	// no validation rules for CreatedAt

	if len(errors) > 0 {
		return GetAllStatusHistoryRequestMultiError(errors)
	}

	return nil
}

// GetAllStatusHistoryRequestMultiError is an error wrapping multiple
// validation errors returned by GetAllStatusHistoryRequest.ValidateAll() if
// the designated constraints aren't met.
type GetAllStatusHistoryRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetAllStatusHistoryRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetAllStatusHistoryRequestMultiError) AllErrors() []error { return m }

// GetAllStatusHistoryRequestValidationError is the validation error returned
// by GetAllStatusHistoryRequest.Validate if the designated constraints aren't met.
type GetAllStatusHistoryRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetAllStatusHistoryRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetAllStatusHistoryRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetAllStatusHistoryRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetAllStatusHistoryRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetAllStatusHistoryRequestValidationError) ErrorName() string {
	return "GetAllStatusHistoryRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetAllStatusHistoryRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetAllStatusHistoryRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetAllStatusHistoryRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetAllStatusHistoryRequestValidationError{}

// Validate checks the field values on GetAllStatusHistoryResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetAllStatusHistoryResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetAllStatusHistoryResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetAllStatusHistoryResponseMultiError, or nil if none found.
func (m *GetAllStatusHistoryResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetAllStatusHistoryResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Message

	// no validation rules for Total

	// no validation rules for Page

	// no validation rules for Limit

	for idx, item := range m.GetStatusHistories() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetAllStatusHistoryResponseValidationError{
						field:  fmt.Sprintf("StatusHistories[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetAllStatusHistoryResponseValidationError{
						field:  fmt.Sprintf("StatusHistories[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetAllStatusHistoryResponseValidationError{
					field:  fmt.Sprintf("StatusHistories[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetAllStatusHistoryResponseMultiError(errors)
	}

	return nil
}

// GetAllStatusHistoryResponseMultiError is an error wrapping multiple
// validation errors returned by GetAllStatusHistoryResponse.ValidateAll() if
// the designated constraints aren't met.
type GetAllStatusHistoryResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetAllStatusHistoryResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetAllStatusHistoryResponseMultiError) AllErrors() []error { return m }

// GetAllStatusHistoryResponseValidationError is the validation error returned
// by GetAllStatusHistoryResponse.Validate if the designated constraints
// aren't met.
type GetAllStatusHistoryResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetAllStatusHistoryResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetAllStatusHistoryResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetAllStatusHistoryResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetAllStatusHistoryResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetAllStatusHistoryResponseValidationError) ErrorName() string {
	return "GetAllStatusHistoryResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetAllStatusHistoryResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetAllStatusHistoryResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetAllStatusHistoryResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetAllStatusHistoryResponseValidationError{}

// Validate checks the field values on GetStatusHistoryByMailHistoryIdRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *GetStatusHistoryByMailHistoryIdRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// GetStatusHistoryByMailHistoryIdRequest with the rules defined in the proto
// definition for this message. If any rules are violated, the result is a
// list of violation errors wrapped in
// GetStatusHistoryByMailHistoryIdRequestMultiError, or nil if none found.
func (m *GetStatusHistoryByMailHistoryIdRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetStatusHistoryByMailHistoryIdRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for MailHistoryId

	// no validation rules for Page

	// no validation rules for Limit

	// no validation rules for Sort

	// no validation rules for Order

	if len(errors) > 0 {
		return GetStatusHistoryByMailHistoryIdRequestMultiError(errors)
	}

	return nil
}

// GetStatusHistoryByMailHistoryIdRequestMultiError is an error wrapping
// multiple validation errors returned by
// GetStatusHistoryByMailHistoryIdRequest.ValidateAll() if the designated
// constraints aren't met.
type GetStatusHistoryByMailHistoryIdRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetStatusHistoryByMailHistoryIdRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetStatusHistoryByMailHistoryIdRequestMultiError) AllErrors() []error { return m }

// GetStatusHistoryByMailHistoryIdRequestValidationError is the validation
// error returned by GetStatusHistoryByMailHistoryIdRequest.Validate if the
// designated constraints aren't met.
type GetStatusHistoryByMailHistoryIdRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetStatusHistoryByMailHistoryIdRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetStatusHistoryByMailHistoryIdRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetStatusHistoryByMailHistoryIdRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetStatusHistoryByMailHistoryIdRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetStatusHistoryByMailHistoryIdRequestValidationError) ErrorName() string {
	return "GetStatusHistoryByMailHistoryIdRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetStatusHistoryByMailHistoryIdRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetStatusHistoryByMailHistoryIdRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetStatusHistoryByMailHistoryIdRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetStatusHistoryByMailHistoryIdRequestValidationError{}

// Validate checks the field values on GetStatusHistoryByMailHistoryIdResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *GetStatusHistoryByMailHistoryIdResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// GetStatusHistoryByMailHistoryIdResponse with the rules defined in the proto
// definition for this message. If any rules are violated, the result is a
// list of violation errors wrapped in
// GetStatusHistoryByMailHistoryIdResponseMultiError, or nil if none found.
func (m *GetStatusHistoryByMailHistoryIdResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetStatusHistoryByMailHistoryIdResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Message

	// no validation rules for Total

	// no validation rules for Page

	// no validation rules for Limit

	for idx, item := range m.GetStatusHistories() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetStatusHistoryByMailHistoryIdResponseValidationError{
						field:  fmt.Sprintf("StatusHistories[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetStatusHistoryByMailHistoryIdResponseValidationError{
						field:  fmt.Sprintf("StatusHistories[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetStatusHistoryByMailHistoryIdResponseValidationError{
					field:  fmt.Sprintf("StatusHistories[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetStatusHistoryByMailHistoryIdResponseMultiError(errors)
	}

	return nil
}

// GetStatusHistoryByMailHistoryIdResponseMultiError is an error wrapping
// multiple validation errors returned by
// GetStatusHistoryByMailHistoryIdResponse.ValidateAll() if the designated
// constraints aren't met.
type GetStatusHistoryByMailHistoryIdResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetStatusHistoryByMailHistoryIdResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetStatusHistoryByMailHistoryIdResponseMultiError) AllErrors() []error { return m }

// GetStatusHistoryByMailHistoryIdResponseValidationError is the validation
// error returned by GetStatusHistoryByMailHistoryIdResponse.Validate if the
// designated constraints aren't met.
type GetStatusHistoryByMailHistoryIdResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetStatusHistoryByMailHistoryIdResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetStatusHistoryByMailHistoryIdResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetStatusHistoryByMailHistoryIdResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetStatusHistoryByMailHistoryIdResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetStatusHistoryByMailHistoryIdResponseValidationError) ErrorName() string {
	return "GetStatusHistoryByMailHistoryIdResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetStatusHistoryByMailHistoryIdResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetStatusHistoryByMailHistoryIdResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetStatusHistoryByMailHistoryIdResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetStatusHistoryByMailHistoryIdResponseValidationError{}

// Validate checks the field values on
// GetLatestStatusHistoryByMailHistoryIdRequest with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetLatestStatusHistoryByMailHistoryIdRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// GetLatestStatusHistoryByMailHistoryIdRequest with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// GetLatestStatusHistoryByMailHistoryIdRequestMultiError, or nil if none found.
func (m *GetLatestStatusHistoryByMailHistoryIdRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetLatestStatusHistoryByMailHistoryIdRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for MailHistoryId

	if len(errors) > 0 {
		return GetLatestStatusHistoryByMailHistoryIdRequestMultiError(errors)
	}

	return nil
}

// GetLatestStatusHistoryByMailHistoryIdRequestMultiError is an error wrapping
// multiple validation errors returned by
// GetLatestStatusHistoryByMailHistoryIdRequest.ValidateAll() if the
// designated constraints aren't met.
type GetLatestStatusHistoryByMailHistoryIdRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetLatestStatusHistoryByMailHistoryIdRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetLatestStatusHistoryByMailHistoryIdRequestMultiError) AllErrors() []error { return m }

// GetLatestStatusHistoryByMailHistoryIdRequestValidationError is the
// validation error returned by
// GetLatestStatusHistoryByMailHistoryIdRequest.Validate if the designated
// constraints aren't met.
type GetLatestStatusHistoryByMailHistoryIdRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetLatestStatusHistoryByMailHistoryIdRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetLatestStatusHistoryByMailHistoryIdRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetLatestStatusHistoryByMailHistoryIdRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetLatestStatusHistoryByMailHistoryIdRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetLatestStatusHistoryByMailHistoryIdRequestValidationError) ErrorName() string {
	return "GetLatestStatusHistoryByMailHistoryIdRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetLatestStatusHistoryByMailHistoryIdRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetLatestStatusHistoryByMailHistoryIdRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetLatestStatusHistoryByMailHistoryIdRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetLatestStatusHistoryByMailHistoryIdRequestValidationError{}

// Validate checks the field values on
// GetLatestStatusHistoryByMailHistoryIdResponse with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetLatestStatusHistoryByMailHistoryIdResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// GetLatestStatusHistoryByMailHistoryIdResponse with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// GetLatestStatusHistoryByMailHistoryIdResponseMultiError, or nil if none found.
func (m *GetLatestStatusHistoryByMailHistoryIdResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetLatestStatusHistoryByMailHistoryIdResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Message

	if all {
		switch v := interface{}(m.GetStatusHistory()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetLatestStatusHistoryByMailHistoryIdResponseValidationError{
					field:  "StatusHistory",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetLatestStatusHistoryByMailHistoryIdResponseValidationError{
					field:  "StatusHistory",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetStatusHistory()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetLatestStatusHistoryByMailHistoryIdResponseValidationError{
				field:  "StatusHistory",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetLatestStatusHistoryByMailHistoryIdResponseMultiError(errors)
	}

	return nil
}

// GetLatestStatusHistoryByMailHistoryIdResponseMultiError is an error wrapping
// multiple validation errors returned by
// GetLatestStatusHistoryByMailHistoryIdResponse.ValidateAll() if the
// designated constraints aren't met.
type GetLatestStatusHistoryByMailHistoryIdResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetLatestStatusHistoryByMailHistoryIdResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetLatestStatusHistoryByMailHistoryIdResponseMultiError) AllErrors() []error { return m }

// GetLatestStatusHistoryByMailHistoryIdResponseValidationError is the
// validation error returned by
// GetLatestStatusHistoryByMailHistoryIdResponse.Validate if the designated
// constraints aren't met.
type GetLatestStatusHistoryByMailHistoryIdResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetLatestStatusHistoryByMailHistoryIdResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetLatestStatusHistoryByMailHistoryIdResponseValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e GetLatestStatusHistoryByMailHistoryIdResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetLatestStatusHistoryByMailHistoryIdResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetLatestStatusHistoryByMailHistoryIdResponseValidationError) ErrorName() string {
	return "GetLatestStatusHistoryByMailHistoryIdResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetLatestStatusHistoryByMailHistoryIdResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetLatestStatusHistoryByMailHistoryIdResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetLatestStatusHistoryByMailHistoryIdResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetLatestStatusHistoryByMailHistoryIdResponseValidationError{}
