// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             (unknown)
// source: mail_history/v1/mail_history.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	MailHistoryService_CreateMailHistory_FullMethodName = "/exam.v1.MailHistoryService/CreateMailHistory"
	MailHistoryService_UpdateMailHistory_FullMethodName = "/exam.v1.MailHistoryService/UpdateMailHistory"
	MailHistoryService_DeleteMailHistory_FullMethodName = "/exam.v1.MailHistoryService/DeleteMailHistory"
	MailHistoryService_GetMailHistory_FullMethodName    = "/exam.v1.MailHistoryService/GetMailHistory"
	MailHistoryService_GetAllMailHistory_FullMethodName = "/exam.v1.MailHistoryService/GetAllMailHistory"
)

// MailHistoryServiceClient is the client API for MailHistoryService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MailHistoryServiceClient interface {
	CreateMailHistory(ctx context.Context, in *CreateMailHistoryRequest, opts ...grpc.CallOption) (*CreateMailHistoryResponse, error)
	UpdateMailHistory(ctx context.Context, in *UpdateMailHistoryRequest, opts ...grpc.CallOption) (*UpdateMailHistoryResponse, error)
	DeleteMailHistory(ctx context.Context, in *DeleteMailHistoryRequest, opts ...grpc.CallOption) (*DeleteMailHistoryResponse, error)
	GetMailHistory(ctx context.Context, in *GetMailHistoryRequest, opts ...grpc.CallOption) (*GetMailHistoryResponse, error)
	GetAllMailHistory(ctx context.Context, in *GetAllMailHistoryRequest, opts ...grpc.CallOption) (*GetAllMailHistoryResponse, error)
}

type mailHistoryServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMailHistoryServiceClient(cc grpc.ClientConnInterface) MailHistoryServiceClient {
	return &mailHistoryServiceClient{cc}
}

func (c *mailHistoryServiceClient) CreateMailHistory(ctx context.Context, in *CreateMailHistoryRequest, opts ...grpc.CallOption) (*CreateMailHistoryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateMailHistoryResponse)
	err := c.cc.Invoke(ctx, MailHistoryService_CreateMailHistory_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mailHistoryServiceClient) UpdateMailHistory(ctx context.Context, in *UpdateMailHistoryRequest, opts ...grpc.CallOption) (*UpdateMailHistoryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateMailHistoryResponse)
	err := c.cc.Invoke(ctx, MailHistoryService_UpdateMailHistory_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mailHistoryServiceClient) DeleteMailHistory(ctx context.Context, in *DeleteMailHistoryRequest, opts ...grpc.CallOption) (*DeleteMailHistoryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteMailHistoryResponse)
	err := c.cc.Invoke(ctx, MailHistoryService_DeleteMailHistory_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mailHistoryServiceClient) GetMailHistory(ctx context.Context, in *GetMailHistoryRequest, opts ...grpc.CallOption) (*GetMailHistoryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetMailHistoryResponse)
	err := c.cc.Invoke(ctx, MailHistoryService_GetMailHistory_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mailHistoryServiceClient) GetAllMailHistory(ctx context.Context, in *GetAllMailHistoryRequest, opts ...grpc.CallOption) (*GetAllMailHistoryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetAllMailHistoryResponse)
	err := c.cc.Invoke(ctx, MailHistoryService_GetAllMailHistory_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MailHistoryServiceServer is the server API for MailHistoryService service.
// All implementations must embed UnimplementedMailHistoryServiceServer
// for forward compatibility
type MailHistoryServiceServer interface {
	CreateMailHistory(context.Context, *CreateMailHistoryRequest) (*CreateMailHistoryResponse, error)
	UpdateMailHistory(context.Context, *UpdateMailHistoryRequest) (*UpdateMailHistoryResponse, error)
	DeleteMailHistory(context.Context, *DeleteMailHistoryRequest) (*DeleteMailHistoryResponse, error)
	GetMailHistory(context.Context, *GetMailHistoryRequest) (*GetMailHistoryResponse, error)
	GetAllMailHistory(context.Context, *GetAllMailHistoryRequest) (*GetAllMailHistoryResponse, error)
	mustEmbedUnimplementedMailHistoryServiceServer()
}

// UnimplementedMailHistoryServiceServer must be embedded to have forward compatible implementations.
type UnimplementedMailHistoryServiceServer struct {
}

func (UnimplementedMailHistoryServiceServer) CreateMailHistory(context.Context, *CreateMailHistoryRequest) (*CreateMailHistoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateMailHistory not implemented")
}
func (UnimplementedMailHistoryServiceServer) UpdateMailHistory(context.Context, *UpdateMailHistoryRequest) (*UpdateMailHistoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateMailHistory not implemented")
}
func (UnimplementedMailHistoryServiceServer) DeleteMailHistory(context.Context, *DeleteMailHistoryRequest) (*DeleteMailHistoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteMailHistory not implemented")
}
func (UnimplementedMailHistoryServiceServer) GetMailHistory(context.Context, *GetMailHistoryRequest) (*GetMailHistoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMailHistory not implemented")
}
func (UnimplementedMailHistoryServiceServer) GetAllMailHistory(context.Context, *GetAllMailHistoryRequest) (*GetAllMailHistoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllMailHistory not implemented")
}
func (UnimplementedMailHistoryServiceServer) mustEmbedUnimplementedMailHistoryServiceServer() {}

// UnsafeMailHistoryServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MailHistoryServiceServer will
// result in compilation errors.
type UnsafeMailHistoryServiceServer interface {
	mustEmbedUnimplementedMailHistoryServiceServer()
}

func RegisterMailHistoryServiceServer(s grpc.ServiceRegistrar, srv MailHistoryServiceServer) {
	s.RegisterService(&MailHistoryService_ServiceDesc, srv)
}

func _MailHistoryService_CreateMailHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateMailHistoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MailHistoryServiceServer).CreateMailHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MailHistoryService_CreateMailHistory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MailHistoryServiceServer).CreateMailHistory(ctx, req.(*CreateMailHistoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MailHistoryService_UpdateMailHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateMailHistoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MailHistoryServiceServer).UpdateMailHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MailHistoryService_UpdateMailHistory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MailHistoryServiceServer).UpdateMailHistory(ctx, req.(*UpdateMailHistoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MailHistoryService_DeleteMailHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteMailHistoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MailHistoryServiceServer).DeleteMailHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MailHistoryService_DeleteMailHistory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MailHistoryServiceServer).DeleteMailHistory(ctx, req.(*DeleteMailHistoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MailHistoryService_GetMailHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMailHistoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MailHistoryServiceServer).GetMailHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MailHistoryService_GetMailHistory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MailHistoryServiceServer).GetMailHistory(ctx, req.(*GetMailHistoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MailHistoryService_GetAllMailHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllMailHistoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MailHistoryServiceServer).GetAllMailHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MailHistoryService_GetAllMailHistory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MailHistoryServiceServer).GetAllMailHistory(ctx, req.(*GetAllMailHistoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// MailHistoryService_ServiceDesc is the grpc.ServiceDesc for MailHistoryService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MailHistoryService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "exam.v1.MailHistoryService",
	HandlerType: (*MailHistoryServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateMailHistory",
			Handler:    _MailHistoryService_CreateMailHistory_Handler,
		},
		{
			MethodName: "UpdateMailHistory",
			Handler:    _MailHistoryService_UpdateMailHistory_Handler,
		},
		{
			MethodName: "DeleteMailHistory",
			Handler:    _MailHistoryService_DeleteMailHistory_Handler,
		},
		{
			MethodName: "GetMailHistory",
			Handler:    _MailHistoryService_GetMailHistory_Handler,
		},
		{
			MethodName: "GetAllMailHistory",
			Handler:    _MailHistoryService_GetAllMailHistory_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "mail_history/v1/mail_history.proto",
}
