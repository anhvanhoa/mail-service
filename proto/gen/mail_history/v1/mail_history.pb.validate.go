// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: mail_history/v1/mail_history.proto

package proto

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on CreateMailHistoryRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateMailHistoryRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateMailHistoryRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateMailHistoryRequestMultiError, or nil if none found.
func (m *CreateMailHistoryRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateMailHistoryRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for TemplateId

	// no validation rules for Subject

	// no validation rules for Body

	// no validation rules for To

	// no validation rules for Data

	// no validation rules for EmailProvider

	// no validation rules for CreatedBy

	// no validation rules for CreatedAt

	if len(errors) > 0 {
		return CreateMailHistoryRequestMultiError(errors)
	}

	return nil
}

// CreateMailHistoryRequestMultiError is an error wrapping multiple validation
// errors returned by CreateMailHistoryRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateMailHistoryRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateMailHistoryRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateMailHistoryRequestMultiError) AllErrors() []error { return m }

// CreateMailHistoryRequestValidationError is the validation error returned by
// CreateMailHistoryRequest.Validate if the designated constraints aren't met.
type CreateMailHistoryRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateMailHistoryRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateMailHistoryRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateMailHistoryRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateMailHistoryRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateMailHistoryRequestValidationError) ErrorName() string {
	return "CreateMailHistoryRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateMailHistoryRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateMailHistoryRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateMailHistoryRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateMailHistoryRequestValidationError{}

// Validate checks the field values on MailHistory with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *MailHistory) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MailHistory with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in MailHistoryMultiError, or
// nil if none found.
func (m *MailHistory) ValidateAll() error {
	return m.validate(true)
}

func (m *MailHistory) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for TemplateId

	// no validation rules for Subject

	// no validation rules for Body

	// no validation rules for To

	// no validation rules for Data

	// no validation rules for EmailProvider

	// no validation rules for CreatedBy

	// no validation rules for CreatedAt

	// no validation rules for UpdatedAt

	if len(errors) > 0 {
		return MailHistoryMultiError(errors)
	}

	return nil
}

// MailHistoryMultiError is an error wrapping multiple validation errors
// returned by MailHistory.ValidateAll() if the designated constraints aren't met.
type MailHistoryMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MailHistoryMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MailHistoryMultiError) AllErrors() []error { return m }

// MailHistoryValidationError is the validation error returned by
// MailHistory.Validate if the designated constraints aren't met.
type MailHistoryValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MailHistoryValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MailHistoryValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MailHistoryValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MailHistoryValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MailHistoryValidationError) ErrorName() string { return "MailHistoryValidationError" }

// Error satisfies the builtin error interface
func (e MailHistoryValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMailHistory.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MailHistoryValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MailHistoryValidationError{}

// Validate checks the field values on CreateMailHistoryResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateMailHistoryResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateMailHistoryResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateMailHistoryResponseMultiError, or nil if none found.
func (m *CreateMailHistoryResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateMailHistoryResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Message

	if all {
		switch v := interface{}(m.GetMailHistory()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateMailHistoryResponseValidationError{
					field:  "MailHistory",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateMailHistoryResponseValidationError{
					field:  "MailHistory",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMailHistory()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateMailHistoryResponseValidationError{
				field:  "MailHistory",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateMailHistoryResponseMultiError(errors)
	}

	return nil
}

// CreateMailHistoryResponseMultiError is an error wrapping multiple validation
// errors returned by CreateMailHistoryResponse.ValidateAll() if the
// designated constraints aren't met.
type CreateMailHistoryResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateMailHistoryResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateMailHistoryResponseMultiError) AllErrors() []error { return m }

// CreateMailHistoryResponseValidationError is the validation error returned by
// CreateMailHistoryResponse.Validate if the designated constraints aren't met.
type CreateMailHistoryResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateMailHistoryResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateMailHistoryResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateMailHistoryResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateMailHistoryResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateMailHistoryResponseValidationError) ErrorName() string {
	return "CreateMailHistoryResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateMailHistoryResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateMailHistoryResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateMailHistoryResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateMailHistoryResponseValidationError{}

// Validate checks the field values on UpdateMailHistoryRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateMailHistoryRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateMailHistoryRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateMailHistoryRequestMultiError, or nil if none found.
func (m *UpdateMailHistoryRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateMailHistoryRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for TemplateId

	// no validation rules for Subject

	// no validation rules for Body

	// no validation rules for To

	// no validation rules for Data

	// no validation rules for EmailProvider

	if len(errors) > 0 {
		return UpdateMailHistoryRequestMultiError(errors)
	}

	return nil
}

// UpdateMailHistoryRequestMultiError is an error wrapping multiple validation
// errors returned by UpdateMailHistoryRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdateMailHistoryRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateMailHistoryRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateMailHistoryRequestMultiError) AllErrors() []error { return m }

// UpdateMailHistoryRequestValidationError is the validation error returned by
// UpdateMailHistoryRequest.Validate if the designated constraints aren't met.
type UpdateMailHistoryRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateMailHistoryRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateMailHistoryRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateMailHistoryRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateMailHistoryRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateMailHistoryRequestValidationError) ErrorName() string {
	return "UpdateMailHistoryRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateMailHistoryRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateMailHistoryRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateMailHistoryRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateMailHistoryRequestValidationError{}

// Validate checks the field values on UpdateMailHistoryResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateMailHistoryResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateMailHistoryResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateMailHistoryResponseMultiError, or nil if none found.
func (m *UpdateMailHistoryResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateMailHistoryResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Message

	if all {
		switch v := interface{}(m.GetMailHistory()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateMailHistoryResponseValidationError{
					field:  "MailHistory",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateMailHistoryResponseValidationError{
					field:  "MailHistory",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMailHistory()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateMailHistoryResponseValidationError{
				field:  "MailHistory",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateMailHistoryResponseMultiError(errors)
	}

	return nil
}

// UpdateMailHistoryResponseMultiError is an error wrapping multiple validation
// errors returned by UpdateMailHistoryResponse.ValidateAll() if the
// designated constraints aren't met.
type UpdateMailHistoryResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateMailHistoryResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateMailHistoryResponseMultiError) AllErrors() []error { return m }

// UpdateMailHistoryResponseValidationError is the validation error returned by
// UpdateMailHistoryResponse.Validate if the designated constraints aren't met.
type UpdateMailHistoryResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateMailHistoryResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateMailHistoryResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateMailHistoryResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateMailHistoryResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateMailHistoryResponseValidationError) ErrorName() string {
	return "UpdateMailHistoryResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateMailHistoryResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateMailHistoryResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateMailHistoryResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateMailHistoryResponseValidationError{}

// Validate checks the field values on DeleteMailHistoryRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteMailHistoryRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteMailHistoryRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteMailHistoryRequestMultiError, or nil if none found.
func (m *DeleteMailHistoryRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteMailHistoryRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return DeleteMailHistoryRequestMultiError(errors)
	}

	return nil
}

// DeleteMailHistoryRequestMultiError is an error wrapping multiple validation
// errors returned by DeleteMailHistoryRequest.ValidateAll() if the designated
// constraints aren't met.
type DeleteMailHistoryRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteMailHistoryRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteMailHistoryRequestMultiError) AllErrors() []error { return m }

// DeleteMailHistoryRequestValidationError is the validation error returned by
// DeleteMailHistoryRequest.Validate if the designated constraints aren't met.
type DeleteMailHistoryRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteMailHistoryRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteMailHistoryRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteMailHistoryRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteMailHistoryRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteMailHistoryRequestValidationError) ErrorName() string {
	return "DeleteMailHistoryRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteMailHistoryRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteMailHistoryRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteMailHistoryRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteMailHistoryRequestValidationError{}

// Validate checks the field values on DeleteMailHistoryResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteMailHistoryResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteMailHistoryResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteMailHistoryResponseMultiError, or nil if none found.
func (m *DeleteMailHistoryResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteMailHistoryResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Message

	if len(errors) > 0 {
		return DeleteMailHistoryResponseMultiError(errors)
	}

	return nil
}

// DeleteMailHistoryResponseMultiError is an error wrapping multiple validation
// errors returned by DeleteMailHistoryResponse.ValidateAll() if the
// designated constraints aren't met.
type DeleteMailHistoryResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteMailHistoryResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteMailHistoryResponseMultiError) AllErrors() []error { return m }

// DeleteMailHistoryResponseValidationError is the validation error returned by
// DeleteMailHistoryResponse.Validate if the designated constraints aren't met.
type DeleteMailHistoryResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteMailHistoryResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteMailHistoryResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteMailHistoryResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteMailHistoryResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteMailHistoryResponseValidationError) ErrorName() string {
	return "DeleteMailHistoryResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteMailHistoryResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteMailHistoryResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteMailHistoryResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteMailHistoryResponseValidationError{}

// Validate checks the field values on GetMailHistoryRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetMailHistoryRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetMailHistoryRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetMailHistoryRequestMultiError, or nil if none found.
func (m *GetMailHistoryRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetMailHistoryRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return GetMailHistoryRequestMultiError(errors)
	}

	return nil
}

// GetMailHistoryRequestMultiError is an error wrapping multiple validation
// errors returned by GetMailHistoryRequest.ValidateAll() if the designated
// constraints aren't met.
type GetMailHistoryRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetMailHistoryRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetMailHistoryRequestMultiError) AllErrors() []error { return m }

// GetMailHistoryRequestValidationError is the validation error returned by
// GetMailHistoryRequest.Validate if the designated constraints aren't met.
type GetMailHistoryRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetMailHistoryRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetMailHistoryRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetMailHistoryRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetMailHistoryRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetMailHistoryRequestValidationError) ErrorName() string {
	return "GetMailHistoryRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetMailHistoryRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetMailHistoryRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetMailHistoryRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetMailHistoryRequestValidationError{}

// Validate checks the field values on GetMailHistoryResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetMailHistoryResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetMailHistoryResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetMailHistoryResponseMultiError, or nil if none found.
func (m *GetMailHistoryResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetMailHistoryResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Message

	if all {
		switch v := interface{}(m.GetMailHistory()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetMailHistoryResponseValidationError{
					field:  "MailHistory",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetMailHistoryResponseValidationError{
					field:  "MailHistory",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMailHistory()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetMailHistoryResponseValidationError{
				field:  "MailHistory",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetMailHistoryResponseMultiError(errors)
	}

	return nil
}

// GetMailHistoryResponseMultiError is an error wrapping multiple validation
// errors returned by GetMailHistoryResponse.ValidateAll() if the designated
// constraints aren't met.
type GetMailHistoryResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetMailHistoryResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetMailHistoryResponseMultiError) AllErrors() []error { return m }

// GetMailHistoryResponseValidationError is the validation error returned by
// GetMailHistoryResponse.Validate if the designated constraints aren't met.
type GetMailHistoryResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetMailHistoryResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetMailHistoryResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetMailHistoryResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetMailHistoryResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetMailHistoryResponseValidationError) ErrorName() string {
	return "GetMailHistoryResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetMailHistoryResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetMailHistoryResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetMailHistoryResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetMailHistoryResponseValidationError{}

// Validate checks the field values on GetAllMailHistoryRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetAllMailHistoryRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetAllMailHistoryRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetAllMailHistoryRequestMultiError, or nil if none found.
func (m *GetAllMailHistoryRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetAllMailHistoryRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Page

	// no validation rules for Limit

	// no validation rules for Search

	// no validation rules for Sort

	// no validation rules for Order

	// no validation rules for TemplateId

	// no validation rules for To

	// no validation rules for EmailProvider

	// no validation rules for CreatedBy

	// no validation rules for CreatedAt

	// no validation rules for UpdatedAt

	if len(errors) > 0 {
		return GetAllMailHistoryRequestMultiError(errors)
	}

	return nil
}

// GetAllMailHistoryRequestMultiError is an error wrapping multiple validation
// errors returned by GetAllMailHistoryRequest.ValidateAll() if the designated
// constraints aren't met.
type GetAllMailHistoryRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetAllMailHistoryRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetAllMailHistoryRequestMultiError) AllErrors() []error { return m }

// GetAllMailHistoryRequestValidationError is the validation error returned by
// GetAllMailHistoryRequest.Validate if the designated constraints aren't met.
type GetAllMailHistoryRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetAllMailHistoryRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetAllMailHistoryRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetAllMailHistoryRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetAllMailHistoryRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetAllMailHistoryRequestValidationError) ErrorName() string {
	return "GetAllMailHistoryRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetAllMailHistoryRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetAllMailHistoryRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetAllMailHistoryRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetAllMailHistoryRequestValidationError{}

// Validate checks the field values on GetAllMailHistoryResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetAllMailHistoryResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetAllMailHistoryResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetAllMailHistoryResponseMultiError, or nil if none found.
func (m *GetAllMailHistoryResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetAllMailHistoryResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Message

	// no validation rules for Total

	// no validation rules for Page

	// no validation rules for Limit

	for idx, item := range m.GetMailHistories() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetAllMailHistoryResponseValidationError{
						field:  fmt.Sprintf("MailHistories[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetAllMailHistoryResponseValidationError{
						field:  fmt.Sprintf("MailHistories[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetAllMailHistoryResponseValidationError{
					field:  fmt.Sprintf("MailHistories[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetAllMailHistoryResponseMultiError(errors)
	}

	return nil
}

// GetAllMailHistoryResponseMultiError is an error wrapping multiple validation
// errors returned by GetAllMailHistoryResponse.ValidateAll() if the
// designated constraints aren't met.
type GetAllMailHistoryResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetAllMailHistoryResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetAllMailHistoryResponseMultiError) AllErrors() []error { return m }

// GetAllMailHistoryResponseValidationError is the validation error returned by
// GetAllMailHistoryResponse.Validate if the designated constraints aren't met.
type GetAllMailHistoryResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetAllMailHistoryResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetAllMailHistoryResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetAllMailHistoryResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetAllMailHistoryResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetAllMailHistoryResponseValidationError) ErrorName() string {
	return "GetAllMailHistoryResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetAllMailHistoryResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetAllMailHistoryResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetAllMailHistoryResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetAllMailHistoryResponseValidationError{}
