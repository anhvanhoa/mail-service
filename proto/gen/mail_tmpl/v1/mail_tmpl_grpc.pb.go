// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             (unknown)
// source: mail_tmpl/v1/mail_tmpl.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	MailTmplService_CreateMailTmpl_FullMethodName = "/exam.v1.MailTmplService/CreateMailTmpl"
	MailTmplService_UpdateMailTmpl_FullMethodName = "/exam.v1.MailTmplService/UpdateMailTmpl"
	MailTmplService_DeleteMailTmpl_FullMethodName = "/exam.v1.MailTmplService/DeleteMailTmpl"
	MailTmplService_GetMailTmpl_FullMethodName    = "/exam.v1.MailTmplService/GetMailTmpl"
	MailTmplService_GetAllMailTmpl_FullMethodName = "/exam.v1.MailTmplService/GetAllMailTmpl"
)

// MailTmplServiceClient is the client API for MailTmplService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MailTmplServiceClient interface {
	CreateMailTmpl(ctx context.Context, in *CreateMailTmplRequest, opts ...grpc.CallOption) (*CreateMailTmplResponse, error)
	UpdateMailTmpl(ctx context.Context, in *UpdateMailTmplRequest, opts ...grpc.CallOption) (*UpdateMailTmplResponse, error)
	DeleteMailTmpl(ctx context.Context, in *DeleteMailTmplRequest, opts ...grpc.CallOption) (*DeleteMailTmplResponse, error)
	GetMailTmpl(ctx context.Context, in *GetMailTmplRequest, opts ...grpc.CallOption) (*GetMailTmplResponse, error)
	GetAllMailTmpl(ctx context.Context, in *GetAllMailTmplRequest, opts ...grpc.CallOption) (*GetAllMailTmplResponse, error)
}

type mailTmplServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMailTmplServiceClient(cc grpc.ClientConnInterface) MailTmplServiceClient {
	return &mailTmplServiceClient{cc}
}

func (c *mailTmplServiceClient) CreateMailTmpl(ctx context.Context, in *CreateMailTmplRequest, opts ...grpc.CallOption) (*CreateMailTmplResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateMailTmplResponse)
	err := c.cc.Invoke(ctx, MailTmplService_CreateMailTmpl_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mailTmplServiceClient) UpdateMailTmpl(ctx context.Context, in *UpdateMailTmplRequest, opts ...grpc.CallOption) (*UpdateMailTmplResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateMailTmplResponse)
	err := c.cc.Invoke(ctx, MailTmplService_UpdateMailTmpl_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mailTmplServiceClient) DeleteMailTmpl(ctx context.Context, in *DeleteMailTmplRequest, opts ...grpc.CallOption) (*DeleteMailTmplResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteMailTmplResponse)
	err := c.cc.Invoke(ctx, MailTmplService_DeleteMailTmpl_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mailTmplServiceClient) GetMailTmpl(ctx context.Context, in *GetMailTmplRequest, opts ...grpc.CallOption) (*GetMailTmplResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetMailTmplResponse)
	err := c.cc.Invoke(ctx, MailTmplService_GetMailTmpl_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mailTmplServiceClient) GetAllMailTmpl(ctx context.Context, in *GetAllMailTmplRequest, opts ...grpc.CallOption) (*GetAllMailTmplResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetAllMailTmplResponse)
	err := c.cc.Invoke(ctx, MailTmplService_GetAllMailTmpl_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MailTmplServiceServer is the server API for MailTmplService service.
// All implementations must embed UnimplementedMailTmplServiceServer
// for forward compatibility
type MailTmplServiceServer interface {
	CreateMailTmpl(context.Context, *CreateMailTmplRequest) (*CreateMailTmplResponse, error)
	UpdateMailTmpl(context.Context, *UpdateMailTmplRequest) (*UpdateMailTmplResponse, error)
	DeleteMailTmpl(context.Context, *DeleteMailTmplRequest) (*DeleteMailTmplResponse, error)
	GetMailTmpl(context.Context, *GetMailTmplRequest) (*GetMailTmplResponse, error)
	GetAllMailTmpl(context.Context, *GetAllMailTmplRequest) (*GetAllMailTmplResponse, error)
	mustEmbedUnimplementedMailTmplServiceServer()
}

// UnimplementedMailTmplServiceServer must be embedded to have forward compatible implementations.
type UnimplementedMailTmplServiceServer struct {
}

func (UnimplementedMailTmplServiceServer) CreateMailTmpl(context.Context, *CreateMailTmplRequest) (*CreateMailTmplResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateMailTmpl not implemented")
}
func (UnimplementedMailTmplServiceServer) UpdateMailTmpl(context.Context, *UpdateMailTmplRequest) (*UpdateMailTmplResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateMailTmpl not implemented")
}
func (UnimplementedMailTmplServiceServer) DeleteMailTmpl(context.Context, *DeleteMailTmplRequest) (*DeleteMailTmplResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteMailTmpl not implemented")
}
func (UnimplementedMailTmplServiceServer) GetMailTmpl(context.Context, *GetMailTmplRequest) (*GetMailTmplResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMailTmpl not implemented")
}
func (UnimplementedMailTmplServiceServer) GetAllMailTmpl(context.Context, *GetAllMailTmplRequest) (*GetAllMailTmplResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllMailTmpl not implemented")
}
func (UnimplementedMailTmplServiceServer) mustEmbedUnimplementedMailTmplServiceServer() {}

// UnsafeMailTmplServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MailTmplServiceServer will
// result in compilation errors.
type UnsafeMailTmplServiceServer interface {
	mustEmbedUnimplementedMailTmplServiceServer()
}

func RegisterMailTmplServiceServer(s grpc.ServiceRegistrar, srv MailTmplServiceServer) {
	s.RegisterService(&MailTmplService_ServiceDesc, srv)
}

func _MailTmplService_CreateMailTmpl_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateMailTmplRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MailTmplServiceServer).CreateMailTmpl(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MailTmplService_CreateMailTmpl_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MailTmplServiceServer).CreateMailTmpl(ctx, req.(*CreateMailTmplRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MailTmplService_UpdateMailTmpl_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateMailTmplRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MailTmplServiceServer).UpdateMailTmpl(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MailTmplService_UpdateMailTmpl_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MailTmplServiceServer).UpdateMailTmpl(ctx, req.(*UpdateMailTmplRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MailTmplService_DeleteMailTmpl_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteMailTmplRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MailTmplServiceServer).DeleteMailTmpl(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MailTmplService_DeleteMailTmpl_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MailTmplServiceServer).DeleteMailTmpl(ctx, req.(*DeleteMailTmplRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MailTmplService_GetMailTmpl_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMailTmplRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MailTmplServiceServer).GetMailTmpl(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MailTmplService_GetMailTmpl_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MailTmplServiceServer).GetMailTmpl(ctx, req.(*GetMailTmplRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MailTmplService_GetAllMailTmpl_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllMailTmplRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MailTmplServiceServer).GetAllMailTmpl(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MailTmplService_GetAllMailTmpl_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MailTmplServiceServer).GetAllMailTmpl(ctx, req.(*GetAllMailTmplRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// MailTmplService_ServiceDesc is the grpc.ServiceDesc for MailTmplService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MailTmplService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "exam.v1.MailTmplService",
	HandlerType: (*MailTmplServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateMailTmpl",
			Handler:    _MailTmplService_CreateMailTmpl_Handler,
		},
		{
			MethodName: "UpdateMailTmpl",
			Handler:    _MailTmplService_UpdateMailTmpl_Handler,
		},
		{
			MethodName: "DeleteMailTmpl",
			Handler:    _MailTmplService_DeleteMailTmpl_Handler,
		},
		{
			MethodName: "GetMailTmpl",
			Handler:    _MailTmplService_GetMailTmpl_Handler,
		},
		{
			MethodName: "GetAllMailTmpl",
			Handler:    _MailTmplService_GetAllMailTmpl_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "mail_tmpl/v1/mail_tmpl.proto",
}
