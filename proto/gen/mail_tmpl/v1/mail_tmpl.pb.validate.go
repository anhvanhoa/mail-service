// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: mail_tmpl/v1/mail_tmpl.proto

package proto

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on CreateMailTmplRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateMailTmplRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateMailTmplRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateMailTmplRequestMultiError, or nil if none found.
func (m *CreateMailTmplRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateMailTmplRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Subject

	// no validation rules for Body

	// no validation rules for CreatedBy

	// no validation rules for CreatedAt

	// no validation rules for Status

	// no validation rules for ProviderEmail

	if len(errors) > 0 {
		return CreateMailTmplRequestMultiError(errors)
	}

	return nil
}

// CreateMailTmplRequestMultiError is an error wrapping multiple validation
// errors returned by CreateMailTmplRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateMailTmplRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateMailTmplRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateMailTmplRequestMultiError) AllErrors() []error { return m }

// CreateMailTmplRequestValidationError is the validation error returned by
// CreateMailTmplRequest.Validate if the designated constraints aren't met.
type CreateMailTmplRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateMailTmplRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateMailTmplRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateMailTmplRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateMailTmplRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateMailTmplRequestValidationError) ErrorName() string {
	return "CreateMailTmplRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateMailTmplRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateMailTmplRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateMailTmplRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateMailTmplRequestValidationError{}

// Validate checks the field values on MailTmpl with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *MailTmpl) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MailTmpl with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in MailTmplMultiError, or nil
// if none found.
func (m *MailTmpl) ValidateAll() error {
	return m.validate(true)
}

func (m *MailTmpl) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Subject

	// no validation rules for Body

	// no validation rules for CreatedBy

	// no validation rules for CreatedAt

	// no validation rules for Status

	// no validation rules for ProviderEmail

	// no validation rules for UpdatedAt

	if len(errors) > 0 {
		return MailTmplMultiError(errors)
	}

	return nil
}

// MailTmplMultiError is an error wrapping multiple validation errors returned
// by MailTmpl.ValidateAll() if the designated constraints aren't met.
type MailTmplMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MailTmplMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MailTmplMultiError) AllErrors() []error { return m }

// MailTmplValidationError is the validation error returned by
// MailTmpl.Validate if the designated constraints aren't met.
type MailTmplValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MailTmplValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MailTmplValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MailTmplValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MailTmplValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MailTmplValidationError) ErrorName() string { return "MailTmplValidationError" }

// Error satisfies the builtin error interface
func (e MailTmplValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMailTmpl.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MailTmplValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MailTmplValidationError{}

// Validate checks the field values on CreateMailTmplResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateMailTmplResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateMailTmplResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateMailTmplResponseMultiError, or nil if none found.
func (m *CreateMailTmplResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateMailTmplResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Message

	if all {
		switch v := interface{}(m.GetMailTmpl()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateMailTmplResponseValidationError{
					field:  "MailTmpl",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateMailTmplResponseValidationError{
					field:  "MailTmpl",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMailTmpl()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateMailTmplResponseValidationError{
				field:  "MailTmpl",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateMailTmplResponseMultiError(errors)
	}

	return nil
}

// CreateMailTmplResponseMultiError is an error wrapping multiple validation
// errors returned by CreateMailTmplResponse.ValidateAll() if the designated
// constraints aren't met.
type CreateMailTmplResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateMailTmplResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateMailTmplResponseMultiError) AllErrors() []error { return m }

// CreateMailTmplResponseValidationError is the validation error returned by
// CreateMailTmplResponse.Validate if the designated constraints aren't met.
type CreateMailTmplResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateMailTmplResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateMailTmplResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateMailTmplResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateMailTmplResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateMailTmplResponseValidationError) ErrorName() string {
	return "CreateMailTmplResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateMailTmplResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateMailTmplResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateMailTmplResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateMailTmplResponseValidationError{}

// Validate checks the field values on UpdateMailTmplRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateMailTmplRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateMailTmplRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateMailTmplRequestMultiError, or nil if none found.
func (m *UpdateMailTmplRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateMailTmplRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Subject

	// no validation rules for Body

	// no validation rules for Status

	// no validation rules for ProviderEmail

	if len(errors) > 0 {
		return UpdateMailTmplRequestMultiError(errors)
	}

	return nil
}

// UpdateMailTmplRequestMultiError is an error wrapping multiple validation
// errors returned by UpdateMailTmplRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdateMailTmplRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateMailTmplRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateMailTmplRequestMultiError) AllErrors() []error { return m }

// UpdateMailTmplRequestValidationError is the validation error returned by
// UpdateMailTmplRequest.Validate if the designated constraints aren't met.
type UpdateMailTmplRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateMailTmplRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateMailTmplRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateMailTmplRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateMailTmplRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateMailTmplRequestValidationError) ErrorName() string {
	return "UpdateMailTmplRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateMailTmplRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateMailTmplRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateMailTmplRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateMailTmplRequestValidationError{}

// Validate checks the field values on UpdateMailTmplResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateMailTmplResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateMailTmplResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateMailTmplResponseMultiError, or nil if none found.
func (m *UpdateMailTmplResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateMailTmplResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Message

	if all {
		switch v := interface{}(m.GetMailTmpl()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateMailTmplResponseValidationError{
					field:  "MailTmpl",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateMailTmplResponseValidationError{
					field:  "MailTmpl",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMailTmpl()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateMailTmplResponseValidationError{
				field:  "MailTmpl",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateMailTmplResponseMultiError(errors)
	}

	return nil
}

// UpdateMailTmplResponseMultiError is an error wrapping multiple validation
// errors returned by UpdateMailTmplResponse.ValidateAll() if the designated
// constraints aren't met.
type UpdateMailTmplResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateMailTmplResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateMailTmplResponseMultiError) AllErrors() []error { return m }

// UpdateMailTmplResponseValidationError is the validation error returned by
// UpdateMailTmplResponse.Validate if the designated constraints aren't met.
type UpdateMailTmplResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateMailTmplResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateMailTmplResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateMailTmplResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateMailTmplResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateMailTmplResponseValidationError) ErrorName() string {
	return "UpdateMailTmplResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateMailTmplResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateMailTmplResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateMailTmplResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateMailTmplResponseValidationError{}

// Validate checks the field values on DeleteMailTmplRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteMailTmplRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteMailTmplRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteMailTmplRequestMultiError, or nil if none found.
func (m *DeleteMailTmplRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteMailTmplRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return DeleteMailTmplRequestMultiError(errors)
	}

	return nil
}

// DeleteMailTmplRequestMultiError is an error wrapping multiple validation
// errors returned by DeleteMailTmplRequest.ValidateAll() if the designated
// constraints aren't met.
type DeleteMailTmplRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteMailTmplRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteMailTmplRequestMultiError) AllErrors() []error { return m }

// DeleteMailTmplRequestValidationError is the validation error returned by
// DeleteMailTmplRequest.Validate if the designated constraints aren't met.
type DeleteMailTmplRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteMailTmplRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteMailTmplRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteMailTmplRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteMailTmplRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteMailTmplRequestValidationError) ErrorName() string {
	return "DeleteMailTmplRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteMailTmplRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteMailTmplRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteMailTmplRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteMailTmplRequestValidationError{}

// Validate checks the field values on DeleteMailTmplResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteMailTmplResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteMailTmplResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteMailTmplResponseMultiError, or nil if none found.
func (m *DeleteMailTmplResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteMailTmplResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Message

	if len(errors) > 0 {
		return DeleteMailTmplResponseMultiError(errors)
	}

	return nil
}

// DeleteMailTmplResponseMultiError is an error wrapping multiple validation
// errors returned by DeleteMailTmplResponse.ValidateAll() if the designated
// constraints aren't met.
type DeleteMailTmplResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteMailTmplResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteMailTmplResponseMultiError) AllErrors() []error { return m }

// DeleteMailTmplResponseValidationError is the validation error returned by
// DeleteMailTmplResponse.Validate if the designated constraints aren't met.
type DeleteMailTmplResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteMailTmplResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteMailTmplResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteMailTmplResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteMailTmplResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteMailTmplResponseValidationError) ErrorName() string {
	return "DeleteMailTmplResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteMailTmplResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteMailTmplResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteMailTmplResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteMailTmplResponseValidationError{}

// Validate checks the field values on GetMailTmplRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetMailTmplRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetMailTmplRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetMailTmplRequestMultiError, or nil if none found.
func (m *GetMailTmplRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetMailTmplRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return GetMailTmplRequestMultiError(errors)
	}

	return nil
}

// GetMailTmplRequestMultiError is an error wrapping multiple validation errors
// returned by GetMailTmplRequest.ValidateAll() if the designated constraints
// aren't met.
type GetMailTmplRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetMailTmplRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetMailTmplRequestMultiError) AllErrors() []error { return m }

// GetMailTmplRequestValidationError is the validation error returned by
// GetMailTmplRequest.Validate if the designated constraints aren't met.
type GetMailTmplRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetMailTmplRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetMailTmplRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetMailTmplRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetMailTmplRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetMailTmplRequestValidationError) ErrorName() string {
	return "GetMailTmplRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetMailTmplRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetMailTmplRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetMailTmplRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetMailTmplRequestValidationError{}

// Validate checks the field values on GetMailTmplResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetMailTmplResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetMailTmplResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetMailTmplResponseMultiError, or nil if none found.
func (m *GetMailTmplResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetMailTmplResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Message

	if all {
		switch v := interface{}(m.GetMailTmpl()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetMailTmplResponseValidationError{
					field:  "MailTmpl",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetMailTmplResponseValidationError{
					field:  "MailTmpl",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMailTmpl()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetMailTmplResponseValidationError{
				field:  "MailTmpl",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetMailTmplResponseMultiError(errors)
	}

	return nil
}

// GetMailTmplResponseMultiError is an error wrapping multiple validation
// errors returned by GetMailTmplResponse.ValidateAll() if the designated
// constraints aren't met.
type GetMailTmplResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetMailTmplResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetMailTmplResponseMultiError) AllErrors() []error { return m }

// GetMailTmplResponseValidationError is the validation error returned by
// GetMailTmplResponse.Validate if the designated constraints aren't met.
type GetMailTmplResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetMailTmplResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetMailTmplResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetMailTmplResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetMailTmplResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetMailTmplResponseValidationError) ErrorName() string {
	return "GetMailTmplResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetMailTmplResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetMailTmplResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetMailTmplResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetMailTmplResponseValidationError{}

// Validate checks the field values on GetAllMailTmplRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetAllMailTmplRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetAllMailTmplRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetAllMailTmplRequestMultiError, or nil if none found.
func (m *GetAllMailTmplRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetAllMailTmplRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Page

	// no validation rules for Limit

	// no validation rules for Search

	// no validation rules for Sort

	// no validation rules for Order

	// no validation rules for Status

	// no validation rules for CreatedBy

	// no validation rules for CreatedAt

	// no validation rules for UpdatedAt

	if len(errors) > 0 {
		return GetAllMailTmplRequestMultiError(errors)
	}

	return nil
}

// GetAllMailTmplRequestMultiError is an error wrapping multiple validation
// errors returned by GetAllMailTmplRequest.ValidateAll() if the designated
// constraints aren't met.
type GetAllMailTmplRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetAllMailTmplRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetAllMailTmplRequestMultiError) AllErrors() []error { return m }

// GetAllMailTmplRequestValidationError is the validation error returned by
// GetAllMailTmplRequest.Validate if the designated constraints aren't met.
type GetAllMailTmplRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetAllMailTmplRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetAllMailTmplRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetAllMailTmplRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetAllMailTmplRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetAllMailTmplRequestValidationError) ErrorName() string {
	return "GetAllMailTmplRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetAllMailTmplRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetAllMailTmplRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetAllMailTmplRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetAllMailTmplRequestValidationError{}

// Validate checks the field values on GetAllMailTmplResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetAllMailTmplResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetAllMailTmplResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetAllMailTmplResponseMultiError, or nil if none found.
func (m *GetAllMailTmplResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetAllMailTmplResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Message

	// no validation rules for Total

	// no validation rules for Page

	// no validation rules for Limit

	for idx, item := range m.GetMailTmpls() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetAllMailTmplResponseValidationError{
						field:  fmt.Sprintf("MailTmpls[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetAllMailTmplResponseValidationError{
						field:  fmt.Sprintf("MailTmpls[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetAllMailTmplResponseValidationError{
					field:  fmt.Sprintf("MailTmpls[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetAllMailTmplResponseMultiError(errors)
	}

	return nil
}

// GetAllMailTmplResponseMultiError is an error wrapping multiple validation
// errors returned by GetAllMailTmplResponse.ValidateAll() if the designated
// constraints aren't met.
type GetAllMailTmplResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetAllMailTmplResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetAllMailTmplResponseMultiError) AllErrors() []error { return m }

// GetAllMailTmplResponseValidationError is the validation error returned by
// GetAllMailTmplResponse.Validate if the designated constraints aren't met.
type GetAllMailTmplResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetAllMailTmplResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetAllMailTmplResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetAllMailTmplResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetAllMailTmplResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetAllMailTmplResponseValidationError) ErrorName() string {
	return "GetAllMailTmplResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetAllMailTmplResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetAllMailTmplResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetAllMailTmplResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetAllMailTmplResponseValidationError{}
